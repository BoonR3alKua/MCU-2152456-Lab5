
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b30  08004b30  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08004b30  08004b30  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b30  08004b30  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200000bc  08004bf4  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004bf4  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121b4  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002963  00000000  00000000  00032299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00034c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00035a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019107  00000000  00000000  000367d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001103a  00000000  00000000  0004f8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008981e  00000000  00000000  00060919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df4  00000000  00000000  000ea18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a9c 	.word	0x08004a9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08004a9c 	.word	0x08004a9c

0800014c <RED_GREEN>:
 *      Author: vtanc
 */

#include "auto.h"

		void RED_GREEN(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
			if (isButtonPressed(0) == 1 ){
 8000150:	2000      	movs	r0, #0
 8000152:	f000 f981 	bl	8000458 <isButtonPressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b01      	cmp	r3, #1
 800015a:	d11c      	bne.n	8000196 <RED_GREEN+0x4a>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000162:	481d      	ldr	r0, [pc, #116]	; (80001d8 <RED_GREEN+0x8c>)
 8000164:	f002 f9c7 	bl	80024f6 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800016e:	481a      	ldr	r0, [pc, #104]	; (80001d8 <RED_GREEN+0x8c>)
 8000170:	f002 f9c1 	bl	80024f6 <HAL_GPIO_WritePin>
											  |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_SET);
				SCH_Delete_Task(0);
 8000174:	2000      	movs	r0, #0
 8000176:	f001 fc33 	bl	80019e0 <SCH_Delete_Task>
				SCH_Delete_Task(1);
 800017a:	2001      	movs	r0, #1
 800017c:	f001 fc30 	bl	80019e0 <SCH_Delete_Task>
				SCH_Add_Task(MODE2, 1, 50);
 8000180:	2232      	movs	r2, #50	; 0x32
 8000182:	2101      	movs	r1, #1
 8000184:	4815      	ldr	r0, [pc, #84]	; (80001dc <RED_GREEN+0x90>)
 8000186:	f001 fb67 	bl	8001858 <SCH_Add_Task>
				SCH_Add_Task(displayIncreaseRed, 1, 50);
 800018a:	2232      	movs	r2, #50	; 0x32
 800018c:	2101      	movs	r1, #1
 800018e:	4814      	ldr	r0, [pc, #80]	; (80001e0 <RED_GREEN+0x94>)
 8000190:	f001 fb62 	bl	8001858 <SCH_Add_Task>
				return;
 8000194:	e01f      	b.n	80001d6 <RED_GREEN+0x8a>
			}
			displayFirstLedCouple(RED);
 8000196:	2001      	movs	r0, #1
 8000198:	f000 fa32 	bl	8000600 <displayFirstLedCouple>
			displaySecondLedCouple(GREEN);
 800019c:	2002      	movs	r0, #2
 800019e:	f000 fa8b 	bl	80006b8 <displaySecondLedCouple>
				countdownFirstCoupleLed--;
 80001a2:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <RED_GREEN+0x98>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	3b01      	subs	r3, #1
 80001a8:	4a0e      	ldr	r2, [pc, #56]	; (80001e4 <RED_GREEN+0x98>)
 80001aa:	6013      	str	r3, [r2, #0]
				countdownSecondCoupleLed--;
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <RED_GREEN+0x9c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	3b01      	subs	r3, #1
 80001b2:	4a0d      	ldr	r2, [pc, #52]	; (80001e8 <RED_GREEN+0x9c>)
 80001b4:	6013      	str	r3, [r2, #0]
				if(countdownSecondCoupleLed == 0){
 80001b6:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <RED_GREEN+0x9c>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d10b      	bne.n	80001d6 <RED_GREEN+0x8a>
					countdownSecondCoupleLed = yellowDelay;
 80001be:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <RED_GREEN+0xa0>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a09      	ldr	r2, [pc, #36]	; (80001e8 <RED_GREEN+0x9c>)
 80001c4:	6013      	str	r3, [r2, #0]
					SCH_Delete_Task(1);
 80001c6:	2001      	movs	r0, #1
 80001c8:	f001 fc0a 	bl	80019e0 <SCH_Delete_Task>
					SCH_Add_Task(RED_YELLOW, 1, 100);
 80001cc:	2264      	movs	r2, #100	; 0x64
 80001ce:	2101      	movs	r1, #1
 80001d0:	4807      	ldr	r0, [pc, #28]	; (80001f0 <RED_GREEN+0xa4>)
 80001d2:	f001 fb41 	bl	8001858 <SCH_Add_Task>
				}
			}
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010800 	.word	0x40010800
 80001dc:	08001441 	.word	0x08001441
 80001e0:	08001375 	.word	0x08001375
 80001e4:	20000100 	.word	0x20000100
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	20000048 	.word	0x20000048
 80001f0:	080001f5 	.word	0x080001f5

080001f4 <RED_YELLOW>:
		void RED_YELLOW(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
			if (isButtonPressed(0) == 1 ){
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 f92d 	bl	8000458 <isButtonPressed>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b01      	cmp	r3, #1
 8000202:	d11c      	bne.n	800023e <RED_YELLOW+0x4a>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800020a:	481f      	ldr	r0, [pc, #124]	; (8000288 <RED_YELLOW+0x94>)
 800020c:	f002 f973 	bl	80024f6 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000216:	481c      	ldr	r0, [pc, #112]	; (8000288 <RED_YELLOW+0x94>)
 8000218:	f002 f96d 	bl	80024f6 <HAL_GPIO_WritePin>
											  |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_SET);
				SCH_Delete_Task(0);
 800021c:	2000      	movs	r0, #0
 800021e:	f001 fbdf 	bl	80019e0 <SCH_Delete_Task>
				SCH_Delete_Task(1);
 8000222:	2001      	movs	r0, #1
 8000224:	f001 fbdc 	bl	80019e0 <SCH_Delete_Task>
				SCH_Add_Task(MODE2, 1, 50);
 8000228:	2232      	movs	r2, #50	; 0x32
 800022a:	2101      	movs	r1, #1
 800022c:	4817      	ldr	r0, [pc, #92]	; (800028c <RED_YELLOW+0x98>)
 800022e:	f001 fb13 	bl	8001858 <SCH_Add_Task>
				SCH_Add_Task(displayIncreaseRed, 1, 50);
 8000232:	2232      	movs	r2, #50	; 0x32
 8000234:	2101      	movs	r1, #1
 8000236:	4816      	ldr	r0, [pc, #88]	; (8000290 <RED_YELLOW+0x9c>)
 8000238:	f001 fb0e 	bl	8001858 <SCH_Add_Task>
				return;
 800023c:	e023      	b.n	8000286 <RED_YELLOW+0x92>
			}
			displayFirstLedCouple(RED);
 800023e:	2001      	movs	r0, #1
 8000240:	f000 f9de 	bl	8000600 <displayFirstLedCouple>
			displaySecondLedCouple(YELLOW);
 8000244:	2003      	movs	r0, #3
 8000246:	f000 fa37 	bl	80006b8 <displaySecondLedCouple>
				countdownFirstCoupleLed--;
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <RED_YELLOW+0xa0>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	3b01      	subs	r3, #1
 8000250:	4a10      	ldr	r2, [pc, #64]	; (8000294 <RED_YELLOW+0xa0>)
 8000252:	6013      	str	r3, [r2, #0]
				countdownSecondCoupleLed--;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <RED_YELLOW+0xa4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3b01      	subs	r3, #1
 800025a:	4a0f      	ldr	r2, [pc, #60]	; (8000298 <RED_YELLOW+0xa4>)
 800025c:	6013      	str	r3, [r2, #0]
				if(countdownSecondCoupleLed == 0){
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <RED_YELLOW+0xa4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d10f      	bne.n	8000286 <RED_YELLOW+0x92>
					countdownSecondCoupleLed = redDelay;
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <RED_YELLOW+0xa8>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a0b      	ldr	r2, [pc, #44]	; (8000298 <RED_YELLOW+0xa4>)
 800026c:	6013      	str	r3, [r2, #0]
					countdownFirstCoupleLed = greenDelay;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <RED_YELLOW+0xac>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a08      	ldr	r2, [pc, #32]	; (8000294 <RED_YELLOW+0xa0>)
 8000274:	6013      	str	r3, [r2, #0]
					SCH_Delete_Task(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f001 fbb2 	bl	80019e0 <SCH_Delete_Task>
					SCH_Add_Task(GREEN_RED, 1, 100);
 800027c:	2264      	movs	r2, #100	; 0x64
 800027e:	2101      	movs	r1, #1
 8000280:	4808      	ldr	r0, [pc, #32]	; (80002a4 <RED_YELLOW+0xb0>)
 8000282:	f001 fae9 	bl	8001858 <SCH_Add_Task>
				}
			}
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40010800 	.word	0x40010800
 800028c:	08001441 	.word	0x08001441
 8000290:	08001375 	.word	0x08001375
 8000294:	20000100 	.word	0x20000100
 8000298:	200000f8 	.word	0x200000f8
 800029c:	20000040 	.word	0x20000040
 80002a0:	20000044 	.word	0x20000044
 80002a4:	080002a9 	.word	0x080002a9

080002a8 <GREEN_RED>:
		void GREEN_RED(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
			if (isButtonPressed(0) == 1 ){
 80002ac:	2000      	movs	r0, #0
 80002ae:	f000 f8d3 	bl	8000458 <isButtonPressed>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d11c      	bne.n	80002f2 <GREEN_RED+0x4a>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80002b8:	2201      	movs	r2, #1
 80002ba:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80002be:	481d      	ldr	r0, [pc, #116]	; (8000334 <GREEN_RED+0x8c>)
 80002c0:	f002 f919 	bl	80024f6 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80002c4:	2201      	movs	r2, #1
 80002c6:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80002ca:	481a      	ldr	r0, [pc, #104]	; (8000334 <GREEN_RED+0x8c>)
 80002cc:	f002 f913 	bl	80024f6 <HAL_GPIO_WritePin>
											  |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_SET);
				SCH_Delete_Task(0);
 80002d0:	2000      	movs	r0, #0
 80002d2:	f001 fb85 	bl	80019e0 <SCH_Delete_Task>
				SCH_Delete_Task(1);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f001 fb82 	bl	80019e0 <SCH_Delete_Task>
				SCH_Add_Task(MODE2, 1, 50);
 80002dc:	2232      	movs	r2, #50	; 0x32
 80002de:	2101      	movs	r1, #1
 80002e0:	4815      	ldr	r0, [pc, #84]	; (8000338 <GREEN_RED+0x90>)
 80002e2:	f001 fab9 	bl	8001858 <SCH_Add_Task>
				SCH_Add_Task(displayIncreaseRed, 1, 50);
 80002e6:	2232      	movs	r2, #50	; 0x32
 80002e8:	2101      	movs	r1, #1
 80002ea:	4814      	ldr	r0, [pc, #80]	; (800033c <GREEN_RED+0x94>)
 80002ec:	f001 fab4 	bl	8001858 <SCH_Add_Task>
				return;
 80002f0:	e01f      	b.n	8000332 <GREEN_RED+0x8a>
			}
			displayFirstLedCouple(GREEN);
 80002f2:	2002      	movs	r0, #2
 80002f4:	f000 f984 	bl	8000600 <displayFirstLedCouple>
			displaySecondLedCouple(RED);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f000 f9dd 	bl	80006b8 <displaySecondLedCouple>
				countdownFirstCoupleLed--;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <GREEN_RED+0x98>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	3b01      	subs	r3, #1
 8000304:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <GREEN_RED+0x98>)
 8000306:	6013      	str	r3, [r2, #0]
				countdownSecondCoupleLed--;
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <GREEN_RED+0x9c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3b01      	subs	r3, #1
 800030e:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <GREEN_RED+0x9c>)
 8000310:	6013      	str	r3, [r2, #0]
				if(countdownFirstCoupleLed == 0){
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <GREEN_RED+0x98>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d10b      	bne.n	8000332 <GREEN_RED+0x8a>
					countdownFirstCoupleLed = yellowDelay;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <GREEN_RED+0xa0>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a08      	ldr	r2, [pc, #32]	; (8000340 <GREEN_RED+0x98>)
 8000320:	6013      	str	r3, [r2, #0]
					SCH_Delete_Task(1);
 8000322:	2001      	movs	r0, #1
 8000324:	f001 fb5c 	bl	80019e0 <SCH_Delete_Task>
					SCH_Add_Task(YELLOW_RED, 1, 100);
 8000328:	2264      	movs	r2, #100	; 0x64
 800032a:	2101      	movs	r1, #1
 800032c:	4807      	ldr	r0, [pc, #28]	; (800034c <GREEN_RED+0xa4>)
 800032e:	f001 fa93 	bl	8001858 <SCH_Add_Task>
				}
			}
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40010800 	.word	0x40010800
 8000338:	08001441 	.word	0x08001441
 800033c:	08001375 	.word	0x08001375
 8000340:	20000100 	.word	0x20000100
 8000344:	200000f8 	.word	0x200000f8
 8000348:	20000048 	.word	0x20000048
 800034c:	08000351 	.word	0x08000351

08000350 <YELLOW_RED>:
		void YELLOW_RED(){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
			if (isButtonPressed(0) == 1 ){
 8000354:	2000      	movs	r0, #0
 8000356:	f000 f87f 	bl	8000458 <isButtonPressed>
 800035a:	4603      	mov	r3, r0
 800035c:	2b01      	cmp	r3, #1
 800035e:	d11c      	bne.n	800039a <YELLOW_RED+0x4a>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000366:	481f      	ldr	r0, [pc, #124]	; (80003e4 <YELLOW_RED+0x94>)
 8000368:	f002 f8c5 	bl	80024f6 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000372:	481c      	ldr	r0, [pc, #112]	; (80003e4 <YELLOW_RED+0x94>)
 8000374:	f002 f8bf 	bl	80024f6 <HAL_GPIO_WritePin>
											  |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_SET);
				SCH_Delete_Task(0);
 8000378:	2000      	movs	r0, #0
 800037a:	f001 fb31 	bl	80019e0 <SCH_Delete_Task>
				SCH_Delete_Task(1);
 800037e:	2001      	movs	r0, #1
 8000380:	f001 fb2e 	bl	80019e0 <SCH_Delete_Task>
				SCH_Add_Task(MODE2, 1, 50);
 8000384:	2232      	movs	r2, #50	; 0x32
 8000386:	2101      	movs	r1, #1
 8000388:	4817      	ldr	r0, [pc, #92]	; (80003e8 <YELLOW_RED+0x98>)
 800038a:	f001 fa65 	bl	8001858 <SCH_Add_Task>
				SCH_Add_Task(displayIncreaseRed, 1, 50);
 800038e:	2232      	movs	r2, #50	; 0x32
 8000390:	2101      	movs	r1, #1
 8000392:	4816      	ldr	r0, [pc, #88]	; (80003ec <YELLOW_RED+0x9c>)
 8000394:	f001 fa60 	bl	8001858 <SCH_Add_Task>
				return;
 8000398:	e023      	b.n	80003e2 <YELLOW_RED+0x92>
			}
			displayFirstLedCouple(YELLOW);
 800039a:	2003      	movs	r0, #3
 800039c:	f000 f930 	bl	8000600 <displayFirstLedCouple>
			displaySecondLedCouple(RED);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f000 f989 	bl	80006b8 <displaySecondLedCouple>
				countdownFirstCoupleLed--;
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <YELLOW_RED+0xa0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	4a10      	ldr	r2, [pc, #64]	; (80003f0 <YELLOW_RED+0xa0>)
 80003ae:	6013      	str	r3, [r2, #0]
				countdownSecondCoupleLed--;
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <YELLOW_RED+0xa4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <YELLOW_RED+0xa4>)
 80003b8:	6013      	str	r3, [r2, #0]
				if(countdownFirstCoupleLed == 0){
 80003ba:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <YELLOW_RED+0xa0>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d10f      	bne.n	80003e2 <YELLOW_RED+0x92>
					countdownSecondCoupleLed = greenDelay;
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <YELLOW_RED+0xa8>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a0b      	ldr	r2, [pc, #44]	; (80003f4 <YELLOW_RED+0xa4>)
 80003c8:	6013      	str	r3, [r2, #0]
					countdownFirstCoupleLed = redDelay;
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <YELLOW_RED+0xac>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <YELLOW_RED+0xa0>)
 80003d0:	6013      	str	r3, [r2, #0]
					SCH_Delete_Task(1);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f001 fb04 	bl	80019e0 <SCH_Delete_Task>
					SCH_Add_Task(RED_GREEN, 1, 100);
 80003d8:	2264      	movs	r2, #100	; 0x64
 80003da:	2101      	movs	r1, #1
 80003dc:	4808      	ldr	r0, [pc, #32]	; (8000400 <YELLOW_RED+0xb0>)
 80003de:	f001 fa3b 	bl	8001858 <SCH_Add_Task>
				}
			}
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40010800 	.word	0x40010800
 80003e8:	08001441 	.word	0x08001441
 80003ec:	08001375 	.word	0x08001375
 80003f0:	20000100 	.word	0x20000100
 80003f4:	200000f8 	.word	0x200000f8
 80003f8:	20000044 	.word	0x20000044
 80003fc:	20000040 	.word	0x20000040
 8000400:	0800014d 	.word	0x0800014d

08000404 <seg_fsm>:
void seg_fsm(){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	switch(seg7AutoState){
 8000408:	4b10      	ldr	r3, [pc, #64]	; (800044c <seg_fsm+0x48>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d002      	beq.n	8000416 <seg_fsm+0x12>
 8000410:	2b01      	cmp	r3, #1
 8000412:	d00c      	beq.n	800042e <seg_fsm+0x2a>
		case SECOND:
			showTimeDelay_Second(countdownFirstCoupleLed, countdownSecondCoupleLed);
			seg7AutoState = FIRST;
			break;
		default:
			break;
 8000414:	e017      	b.n	8000446 <seg_fsm+0x42>
			showTimeDelay_First(countdownFirstCoupleLed, countdownSecondCoupleLed);
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <seg_fsm+0x4c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <seg_fsm+0x50>)
 800041c:	6812      	ldr	r2, [r2, #0]
 800041e:	4611      	mov	r1, r2
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fd75 	bl	8000f10 <showTimeDelay_First>
			seg7AutoState = SECOND;
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <seg_fsm+0x48>)
 8000428:	2201      	movs	r2, #1
 800042a:	701a      	strb	r2, [r3, #0]
			break;
 800042c:	e00b      	b.n	8000446 <seg_fsm+0x42>
			showTimeDelay_Second(countdownFirstCoupleLed, countdownSecondCoupleLed);
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <seg_fsm+0x4c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a08      	ldr	r2, [pc, #32]	; (8000454 <seg_fsm+0x50>)
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fd93 	bl	8000f64 <showTimeDelay_Second>
			seg7AutoState = FIRST;
 800043e:	4b03      	ldr	r3, [pc, #12]	; (800044c <seg_fsm+0x48>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
			break;
 8000444:	bf00      	nop
	}
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200000fc 	.word	0x200000fc
 8000450:	20000100 	.word	0x20000100
 8000454:	200000f8 	.word	0x200000f8

08000458 <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};


int isButtonPressed(int i){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1){
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <isButtonPressed+0x30>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d106      	bne.n	800047a <isButtonPressed+0x22>
		button_flag[i] = 0;
 800046c:	4a06      	ldr	r2, [pc, #24]	; (8000488 <isButtonPressed+0x30>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2100      	movs	r1, #0
 8000472:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000476:	2301      	movs	r3, #1
 8000478:	e000      	b.n	800047c <isButtonPressed+0x24>
	}
	return 0;
 800047a:	2300      	movs	r3, #0

}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	200000d8 	.word	0x200000d8

0800048c <subKeyProcess>:

void subKeyProcess(int i){
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <subKeyProcess+0x1c>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2101      	movs	r1, #1
 800049a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	200000d8 	.word	0x200000d8

080004ac <getKeyInput>:

void getKeyInput(){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
for(int i=0; i<BUTTONS_NUMBER; i++){
 80004b2:	2300      	movs	r3, #0
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	e089      	b.n	80005cc <getKeyInput+0x120>
  KeyReg2[i] = KeyReg1[i];
 80004b8:	4a49      	ldr	r2, [pc, #292]	; (80005e0 <getKeyInput+0x134>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004c0:	4948      	ldr	r1, [pc, #288]	; (80005e4 <getKeyInput+0x138>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg0[i];
 80004c8:	4a47      	ldr	r2, [pc, #284]	; (80005e8 <getKeyInput+0x13c>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004d0:	4943      	ldr	r1, [pc, #268]	; (80005e0 <getKeyInput+0x134>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if(i == 0)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d10f      	bne.n	80004fe <getKeyInput+0x52>
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, buttonsArr[i]);
 80004de:	4a43      	ldr	r2, [pc, #268]	; (80005ec <getKeyInput+0x140>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	4841      	ldr	r0, [pc, #260]	; (80005f0 <getKeyInput+0x144>)
 80004ec:	f001 ffec 	bl	80024c8 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4619      	mov	r1, r3
 80004f4:	4a3c      	ldr	r2, [pc, #240]	; (80005e8 <getKeyInput+0x13c>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80004fc:	e021      	b.n	8000542 <getKeyInput+0x96>
  else if(i ==1)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d10f      	bne.n	8000524 <getKeyInput+0x78>
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, buttonsArr[i]);
 8000504:	4a39      	ldr	r2, [pc, #228]	; (80005ec <getKeyInput+0x140>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800050c:	b29b      	uxth	r3, r3
 800050e:	4619      	mov	r1, r3
 8000510:	4838      	ldr	r0, [pc, #224]	; (80005f4 <getKeyInput+0x148>)
 8000512:	f001 ffd9 	bl	80024c8 <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	4619      	mov	r1, r3
 800051a:	4a33      	ldr	r2, [pc, #204]	; (80005e8 <getKeyInput+0x13c>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000522:	e00e      	b.n	8000542 <getKeyInput+0x96>
  else
	  KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, buttonsArr[i]);
 8000524:	4a31      	ldr	r2, [pc, #196]	; (80005ec <getKeyInput+0x140>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052c:	b29b      	uxth	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	4830      	ldr	r0, [pc, #192]	; (80005f4 <getKeyInput+0x148>)
 8000532:	f001 ffc9 	bl	80024c8 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	4619      	mov	r1, r3
 800053a:	4a2b      	ldr	r2, [pc, #172]	; (80005e8 <getKeyInput+0x13c>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000542:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <getKeyInput+0x134>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800054a:	4927      	ldr	r1, [pc, #156]	; (80005e8 <getKeyInput+0x13c>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000552:	429a      	cmp	r2, r3
 8000554:	d137      	bne.n	80005c6 <getKeyInput+0x11a>
 8000556:	4a22      	ldr	r2, [pc, #136]	; (80005e0 <getKeyInput+0x134>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055e:	4921      	ldr	r1, [pc, #132]	; (80005e4 <getKeyInput+0x138>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000566:	429a      	cmp	r2, r3
 8000568:	d12d      	bne.n	80005c6 <getKeyInput+0x11a>
    if (KeyReg2[i] != KeyReg3[i]){
 800056a:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <getKeyInput+0x138>)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000572:	4921      	ldr	r1, [pc, #132]	; (80005f8 <getKeyInput+0x14c>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800057a:	429a      	cmp	r2, r3
 800057c:	d015      	beq.n	80005aa <getKeyInput+0xfe>
      KeyReg3[i] = KeyReg2[i];
 800057e:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <getKeyInput+0x138>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000586:	491c      	ldr	r1, [pc, #112]	; (80005f8 <getKeyInput+0x14c>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 800058e:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <getKeyInput+0x14c>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d115      	bne.n	80005c6 <getKeyInput+0x11a>
        TimeOutForKeyPress = 500;
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <getKeyInput+0x150>)
 800059c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005a0:	601a      	str	r2, [r3, #0]
        subKeyProcess(i);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f7ff ff72 	bl	800048c <subKeyProcess>
 80005a8:	e00d      	b.n	80005c6 <getKeyInput+0x11a>
      }
    }else{
       TimeOutForKeyPress --;
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <getKeyInput+0x150>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	4a12      	ldr	r2, [pc, #72]	; (80005fc <getKeyInput+0x150>)
 80005b2:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <getKeyInput+0x150>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d104      	bne.n	80005c6 <getKeyInput+0x11a>
          KeyReg3[i] = NORMAL_STATE;
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <getKeyInput+0x14c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2101      	movs	r1, #1
 80005c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(int i=0; i<BUTTONS_NUMBER; i++){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3301      	adds	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	f77f af72 	ble.w	80004b8 <getKeyInput+0xc>
        }
    }
  }
}
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000018 	.word	0x20000018
 80005e4:	20000024 	.word	0x20000024
 80005e8:	2000000c 	.word	0x2000000c
 80005ec:	20000000 	.word	0x20000000
 80005f0:	40010800 	.word	0x40010800
 80005f4:	40011000 	.word	0x40011000
 80005f8:	20000030 	.word	0x20000030
 80005fc:	2000003c 	.word	0x2000003c

08000600 <displayFirstLedCouple>:
 *      Author: vtanc
 */

#include "display.h"

void displayFirstLedCouple(enum LedState state_1){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d84b      	bhi.n	80006a8 <displayFirstLedCouple+0xa8>
 8000610:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <displayFirstLedCouple+0x18>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	08000649 	.word	0x08000649
 8000620:	08000689 	.word	0x08000689
 8000624:	08000669 	.word	0x08000669
	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 8000628:	2201      	movs	r2, #1
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	4821      	ldr	r0, [pc, #132]	; (80006b4 <displayFirstLedCouple+0xb4>)
 800062e:	f001 ff62 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1 ) ;
 8000632:	2201      	movs	r2, #1
 8000634:	2120      	movs	r1, #32
 8000636:	481f      	ldr	r0, [pc, #124]	; (80006b4 <displayFirstLedCouple+0xb4>)
 8000638:	f001 ff5d 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1 ) ;
 800063c:	2201      	movs	r2, #1
 800063e:	2110      	movs	r1, #16
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <displayFirstLedCouple+0xb4>)
 8000642:	f001 ff58 	bl	80024f6 <HAL_GPIO_WritePin>
			 break;
 8000646:	e030      	b.n	80006aa <displayFirstLedCouple+0xaa>
	 case RED:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 8000648:	2201      	movs	r2, #1
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	4819      	ldr	r0, [pc, #100]	; (80006b4 <displayFirstLedCouple+0xb4>)
 800064e:	f001 ff52 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1 ) ;
 8000652:	2201      	movs	r2, #1
 8000654:	2120      	movs	r1, #32
 8000656:	4817      	ldr	r0, [pc, #92]	; (80006b4 <displayFirstLedCouple+0xb4>)
 8000658:	f001 ff4d 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0 ) ;
 800065c:	2200      	movs	r2, #0
 800065e:	2110      	movs	r1, #16
 8000660:	4814      	ldr	r0, [pc, #80]	; (80006b4 <displayFirstLedCouple+0xb4>)
 8000662:	f001 ff48 	bl	80024f6 <HAL_GPIO_WritePin>
			 break;
 8000666:	e020      	b.n	80006aa <displayFirstLedCouple+0xaa>
	 case YELLOW:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 8000668:	2201      	movs	r2, #1
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <displayFirstLedCouple+0xb4>)
 800066e:	f001 ff42 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0 ) ;
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	480f      	ldr	r0, [pc, #60]	; (80006b4 <displayFirstLedCouple+0xb4>)
 8000678:	f001 ff3d 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1 ) ;
 800067c:	2201      	movs	r2, #1
 800067e:	2110      	movs	r1, #16
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <displayFirstLedCouple+0xb4>)
 8000682:	f001 ff38 	bl	80024f6 <HAL_GPIO_WritePin>
			 break;
 8000686:	e010      	b.n	80006aa <displayFirstLedCouple+0xaa>
	 case GREEN:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000688:	2200      	movs	r2, #0
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <displayFirstLedCouple+0xb4>)
 800068e:	f001 ff32 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1 ) ;
 8000692:	2201      	movs	r2, #1
 8000694:	2120      	movs	r1, #32
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <displayFirstLedCouple+0xb4>)
 8000698:	f001 ff2d 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1 ) ;
 800069c:	2201      	movs	r2, #1
 800069e:	2110      	movs	r1, #16
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <displayFirstLedCouple+0xb4>)
 80006a2:	f001 ff28 	bl	80024f6 <HAL_GPIO_WritePin>
			 break;
 80006a6:	e000      	b.n	80006aa <displayFirstLedCouple+0xaa>
	 default:
		 break;
 80006a8:	bf00      	nop
	}
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40010800 	.word	0x40010800

080006b8 <displaySecondLedCouple>:



void displaySecondLedCouple(enum LedState state_2){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	d853      	bhi.n	8000770 <displaySecondLedCouple+0xb8>
 80006c8:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <displaySecondLedCouple+0x18>)
 80006ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ce:	bf00      	nop
 80006d0:	080006e1 	.word	0x080006e1
 80006d4:	08000705 	.word	0x08000705
 80006d8:	0800074d 	.word	0x0800074d
 80006dc:	08000729 	.word	0x08000729
	 	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e6:	4825      	ldr	r0, [pc, #148]	; (800077c <displaySecondLedCouple+0xc4>)
 80006e8:	f001 ff05 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1 ) ;
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f2:	4822      	ldr	r0, [pc, #136]	; (800077c <displaySecondLedCouple+0xc4>)
 80006f4:	f001 feff 	bl	80024f6 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1 ) ;
 80006f8:	2201      	movs	r2, #1
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	481f      	ldr	r0, [pc, #124]	; (800077c <displaySecondLedCouple+0xc4>)
 80006fe:	f001 fefa 	bl	80024f6 <HAL_GPIO_WritePin>
			 break;
 8000702:	e036      	b.n	8000772 <displaySecondLedCouple+0xba>
		case RED:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070a:	481c      	ldr	r0, [pc, #112]	; (800077c <displaySecondLedCouple+0xc4>)
 800070c:	f001 fef3 	bl	80024f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1 ) ;
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <displaySecondLedCouple+0xc4>)
 8000718:	f001 feed 	bl	80024f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0 ) ;
 800071c:	2200      	movs	r2, #0
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	4816      	ldr	r0, [pc, #88]	; (800077c <displaySecondLedCouple+0xc4>)
 8000722:	f001 fee8 	bl	80024f6 <HAL_GPIO_WritePin>
			break;
 8000726:	e024      	b.n	8000772 <displaySecondLedCouple+0xba>
		case YELLOW:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	4813      	ldr	r0, [pc, #76]	; (800077c <displaySecondLedCouple+0xc4>)
 8000730:	f001 fee1 	bl	80024f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0 ) ;
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073a:	4810      	ldr	r0, [pc, #64]	; (800077c <displaySecondLedCouple+0xc4>)
 800073c:	f001 fedb 	bl	80024f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1 ) ;
 8000740:	2201      	movs	r2, #1
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <displaySecondLedCouple+0xc4>)
 8000746:	f001 fed6 	bl	80024f6 <HAL_GPIO_WritePin>
			break;
 800074a:	e012      	b.n	8000772 <displaySecondLedCouple+0xba>
		case GREEN:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000752:	480a      	ldr	r0, [pc, #40]	; (800077c <displaySecondLedCouple+0xc4>)
 8000754:	f001 fecf 	bl	80024f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1 ) ;
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <displaySecondLedCouple+0xc4>)
 8000760:	f001 fec9 	bl	80024f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1 ) ;
 8000764:	2201      	movs	r2, #1
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <displaySecondLedCouple+0xc4>)
 800076a:	f001 fec4 	bl	80024f6 <HAL_GPIO_WritePin>
			break;
 800076e:	e000      	b.n	8000772 <displaySecondLedCouple+0xba>
		default:
		  break;
 8000770:	bf00      	nop
   }
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40010800 	.word	0x40010800

08000780 <displaySEG7_1>:
	HAL_GPIO_TogglePin( GREEN1_GPIO_Port , GREEN1_Pin) ;
	HAL_GPIO_TogglePin( GREEN2_GPIO_Port , GREEN2_Pin) ;
}


void displaySEG7_1(int num){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b09      	cmp	r3, #9
 800078c:	f200 8180 	bhi.w	8000a90 <displaySEG7_1+0x310>
 8000790:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <displaySEG7_1+0x18>)
 8000792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000796:	bf00      	nop
 8000798:	080007c1 	.word	0x080007c1
 800079c:	08000809 	.word	0x08000809
 80007a0:	08000851 	.word	0x08000851
 80007a4:	08000899 	.word	0x08000899
 80007a8:	080008e1 	.word	0x080008e1
 80007ac:	08000929 	.word	0x08000929
 80007b0:	08000971 	.word	0x08000971
 80007b4:	080009b9 	.word	0x080009b9
 80007b8:	08000a01 	.word	0x08000a01
 80007bc:	08000a49 	.word	0x08000a49
switch(num){
	case 0:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	48b5      	ldr	r0, [pc, #724]	; (8000a9c <displaySEG7_1+0x31c>)
 80007c6:	f001 fe96 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	48b3      	ldr	r0, [pc, #716]	; (8000a9c <displaySEG7_1+0x31c>)
 80007d0:	f001 fe91 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80007d4:	2200      	movs	r2, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	48b0      	ldr	r0, [pc, #704]	; (8000a9c <displaySEG7_1+0x31c>)
 80007da:	f001 fe8c 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	48ae      	ldr	r0, [pc, #696]	; (8000a9c <displaySEG7_1+0x31c>)
 80007e4:	f001 fe87 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 80007e8:	2200      	movs	r2, #0
 80007ea:	2110      	movs	r1, #16
 80007ec:	48ab      	ldr	r0, [pc, #684]	; (8000a9c <displaySEG7_1+0x31c>)
 80007ee:	f001 fe82 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	48a9      	ldr	r0, [pc, #676]	; (8000a9c <displaySEG7_1+0x31c>)
 80007f8:	f001 fe7d 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 80007fc:	2201      	movs	r2, #1
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	48a6      	ldr	r0, [pc, #664]	; (8000a9c <displaySEG7_1+0x31c>)
 8000802:	f001 fe78 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000806:	e144      	b.n	8000a92 <displaySEG7_1+0x312>

	case 1:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	48a3      	ldr	r0, [pc, #652]	; (8000a9c <displaySEG7_1+0x31c>)
 800080e:	f001 fe72 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000812:	2200      	movs	r2, #0
 8000814:	2102      	movs	r1, #2
 8000816:	48a1      	ldr	r0, [pc, #644]	; (8000a9c <displaySEG7_1+0x31c>)
 8000818:	f001 fe6d 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 800081c:	2200      	movs	r2, #0
 800081e:	2104      	movs	r1, #4
 8000820:	489e      	ldr	r0, [pc, #632]	; (8000a9c <displaySEG7_1+0x31c>)
 8000822:	f001 fe68 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 8000826:	2201      	movs	r2, #1
 8000828:	2108      	movs	r1, #8
 800082a:	489c      	ldr	r0, [pc, #624]	; (8000a9c <displaySEG7_1+0x31c>)
 800082c:	f001 fe63 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000830:	2201      	movs	r2, #1
 8000832:	2110      	movs	r1, #16
 8000834:	4899      	ldr	r0, [pc, #612]	; (8000a9c <displaySEG7_1+0x31c>)
 8000836:	f001 fe5e 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 800083a:	2201      	movs	r2, #1
 800083c:	2120      	movs	r1, #32
 800083e:	4897      	ldr	r0, [pc, #604]	; (8000a9c <displaySEG7_1+0x31c>)
 8000840:	f001 fe59 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 8000844:	2201      	movs	r2, #1
 8000846:	2140      	movs	r1, #64	; 0x40
 8000848:	4894      	ldr	r0, [pc, #592]	; (8000a9c <displaySEG7_1+0x31c>)
 800084a:	f001 fe54 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 800084e:	e120      	b.n	8000a92 <displaySEG7_1+0x312>

	case 2:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	4891      	ldr	r0, [pc, #580]	; (8000a9c <displaySEG7_1+0x31c>)
 8000856:	f001 fe4e 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800085a:	2200      	movs	r2, #0
 800085c:	2102      	movs	r1, #2
 800085e:	488f      	ldr	r0, [pc, #572]	; (8000a9c <displaySEG7_1+0x31c>)
 8000860:	f001 fe49 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 1 ) ;
 8000864:	2201      	movs	r2, #1
 8000866:	2104      	movs	r1, #4
 8000868:	488c      	ldr	r0, [pc, #560]	; (8000a9c <displaySEG7_1+0x31c>)
 800086a:	f001 fe44 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800086e:	2200      	movs	r2, #0
 8000870:	2108      	movs	r1, #8
 8000872:	488a      	ldr	r0, [pc, #552]	; (8000a9c <displaySEG7_1+0x31c>)
 8000874:	f001 fe3f 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000878:	2200      	movs	r2, #0
 800087a:	2110      	movs	r1, #16
 800087c:	4887      	ldr	r0, [pc, #540]	; (8000a9c <displaySEG7_1+0x31c>)
 800087e:	f001 fe3a 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 8000882:	2201      	movs	r2, #1
 8000884:	2120      	movs	r1, #32
 8000886:	4885      	ldr	r0, [pc, #532]	; (8000a9c <displaySEG7_1+0x31c>)
 8000888:	f001 fe35 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800088c:	2200      	movs	r2, #0
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4882      	ldr	r0, [pc, #520]	; (8000a9c <displaySEG7_1+0x31c>)
 8000892:	f001 fe30 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000896:	e0fc      	b.n	8000a92 <displaySEG7_1+0x312>

	case 3:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	487f      	ldr	r0, [pc, #508]	; (8000a9c <displaySEG7_1+0x31c>)
 800089e:	f001 fe2a 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80008a2:	2200      	movs	r2, #0
 80008a4:	2102      	movs	r1, #2
 80008a6:	487d      	ldr	r0, [pc, #500]	; (8000a9c <displaySEG7_1+0x31c>)
 80008a8:	f001 fe25 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	487a      	ldr	r0, [pc, #488]	; (8000a9c <displaySEG7_1+0x31c>)
 80008b2:	f001 fe20 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	4878      	ldr	r0, [pc, #480]	; (8000a9c <displaySEG7_1+0x31c>)
 80008bc:	f001 fe1b 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	4875      	ldr	r0, [pc, #468]	; (8000a9c <displaySEG7_1+0x31c>)
 80008c6:	f001 fe16 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80008ca:	2201      	movs	r2, #1
 80008cc:	2120      	movs	r1, #32
 80008ce:	4873      	ldr	r0, [pc, #460]	; (8000a9c <displaySEG7_1+0x31c>)
 80008d0:	f001 fe11 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80008d4:	2200      	movs	r2, #0
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	4870      	ldr	r0, [pc, #448]	; (8000a9c <displaySEG7_1+0x31c>)
 80008da:	f001 fe0c 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 80008de:	e0d8      	b.n	8000a92 <displaySEG7_1+0x312>

	case 4:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 80008e0:	2201      	movs	r2, #1
 80008e2:	2101      	movs	r1, #1
 80008e4:	486d      	ldr	r0, [pc, #436]	; (8000a9c <displaySEG7_1+0x31c>)
 80008e6:	f001 fe06 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	486b      	ldr	r0, [pc, #428]	; (8000a9c <displaySEG7_1+0x31c>)
 80008f0:	f001 fe01 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80008f4:	2200      	movs	r2, #0
 80008f6:	2104      	movs	r1, #4
 80008f8:	4868      	ldr	r0, [pc, #416]	; (8000a9c <displaySEG7_1+0x31c>)
 80008fa:	f001 fdfc 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 80008fe:	2201      	movs	r2, #1
 8000900:	2108      	movs	r1, #8
 8000902:	4866      	ldr	r0, [pc, #408]	; (8000a9c <displaySEG7_1+0x31c>)
 8000904:	f001 fdf7 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000908:	2201      	movs	r2, #1
 800090a:	2110      	movs	r1, #16
 800090c:	4863      	ldr	r0, [pc, #396]	; (8000a9c <displaySEG7_1+0x31c>)
 800090e:	f001 fdf2 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	4861      	ldr	r0, [pc, #388]	; (8000a9c <displaySEG7_1+0x31c>)
 8000918:	f001 fded 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800091c:	2200      	movs	r2, #0
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	485e      	ldr	r0, [pc, #376]	; (8000a9c <displaySEG7_1+0x31c>)
 8000922:	f001 fde8 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000926:	e0b4      	b.n	8000a92 <displaySEG7_1+0x312>

	case 5:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	485b      	ldr	r0, [pc, #364]	; (8000a9c <displaySEG7_1+0x31c>)
 800092e:	f001 fde2 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 8000932:	2201      	movs	r2, #1
 8000934:	2102      	movs	r1, #2
 8000936:	4859      	ldr	r0, [pc, #356]	; (8000a9c <displaySEG7_1+0x31c>)
 8000938:	f001 fddd 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 800093c:	2200      	movs	r2, #0
 800093e:	2104      	movs	r1, #4
 8000940:	4856      	ldr	r0, [pc, #344]	; (8000a9c <displaySEG7_1+0x31c>)
 8000942:	f001 fdd8 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	4854      	ldr	r0, [pc, #336]	; (8000a9c <displaySEG7_1+0x31c>)
 800094c:	f001 fdd3 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000950:	2201      	movs	r2, #1
 8000952:	2110      	movs	r1, #16
 8000954:	4851      	ldr	r0, [pc, #324]	; (8000a9c <displaySEG7_1+0x31c>)
 8000956:	f001 fdce 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	484f      	ldr	r0, [pc, #316]	; (8000a9c <displaySEG7_1+0x31c>)
 8000960:	f001 fdc9 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000964:	2200      	movs	r2, #0
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	484c      	ldr	r0, [pc, #304]	; (8000a9c <displaySEG7_1+0x31c>)
 800096a:	f001 fdc4 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 800096e:	e090      	b.n	8000a92 <displaySEG7_1+0x312>

	case 6:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000970:	2200      	movs	r2, #0
 8000972:	2101      	movs	r1, #1
 8000974:	4849      	ldr	r0, [pc, #292]	; (8000a9c <displaySEG7_1+0x31c>)
 8000976:	f001 fdbe 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 800097a:	2201      	movs	r2, #1
 800097c:	2102      	movs	r1, #2
 800097e:	4847      	ldr	r0, [pc, #284]	; (8000a9c <displaySEG7_1+0x31c>)
 8000980:	f001 fdb9 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000984:	2200      	movs	r2, #0
 8000986:	2104      	movs	r1, #4
 8000988:	4844      	ldr	r0, [pc, #272]	; (8000a9c <displaySEG7_1+0x31c>)
 800098a:	f001 fdb4 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	4842      	ldr	r0, [pc, #264]	; (8000a9c <displaySEG7_1+0x31c>)
 8000994:	f001 fdaf 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000998:	2200      	movs	r2, #0
 800099a:	2110      	movs	r1, #16
 800099c:	483f      	ldr	r0, [pc, #252]	; (8000a9c <displaySEG7_1+0x31c>)
 800099e:	f001 fdaa 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	483d      	ldr	r0, [pc, #244]	; (8000a9c <displaySEG7_1+0x31c>)
 80009a8:	f001 fda5 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80009ac:	2200      	movs	r2, #0
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	483a      	ldr	r0, [pc, #232]	; (8000a9c <displaySEG7_1+0x31c>)
 80009b2:	f001 fda0 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 80009b6:	e06c      	b.n	8000a92 <displaySEG7_1+0x312>

	case 7:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	4837      	ldr	r0, [pc, #220]	; (8000a9c <displaySEG7_1+0x31c>)
 80009be:	f001 fd9a 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80009c2:	2200      	movs	r2, #0
 80009c4:	2102      	movs	r1, #2
 80009c6:	4835      	ldr	r0, [pc, #212]	; (8000a9c <displaySEG7_1+0x31c>)
 80009c8:	f001 fd95 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80009cc:	2200      	movs	r2, #0
 80009ce:	2104      	movs	r1, #4
 80009d0:	4832      	ldr	r0, [pc, #200]	; (8000a9c <displaySEG7_1+0x31c>)
 80009d2:	f001 fd90 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 80009d6:	2201      	movs	r2, #1
 80009d8:	2108      	movs	r1, #8
 80009da:	4830      	ldr	r0, [pc, #192]	; (8000a9c <displaySEG7_1+0x31c>)
 80009dc:	f001 fd8b 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80009e0:	2201      	movs	r2, #1
 80009e2:	2110      	movs	r1, #16
 80009e4:	482d      	ldr	r0, [pc, #180]	; (8000a9c <displaySEG7_1+0x31c>)
 80009e6:	f001 fd86 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80009ea:	2201      	movs	r2, #1
 80009ec:	2120      	movs	r1, #32
 80009ee:	482b      	ldr	r0, [pc, #172]	; (8000a9c <displaySEG7_1+0x31c>)
 80009f0:	f001 fd81 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 80009f4:	2201      	movs	r2, #1
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	4828      	ldr	r0, [pc, #160]	; (8000a9c <displaySEG7_1+0x31c>)
 80009fa:	f001 fd7c 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 80009fe:	e048      	b.n	8000a92 <displaySEG7_1+0x312>

	case 8:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000a00:	2200      	movs	r2, #0
 8000a02:	2101      	movs	r1, #1
 8000a04:	4825      	ldr	r0, [pc, #148]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a06:	f001 fd76 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4823      	ldr	r0, [pc, #140]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a10:	f001 fd71 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000a14:	2200      	movs	r2, #0
 8000a16:	2104      	movs	r1, #4
 8000a18:	4820      	ldr	r0, [pc, #128]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a1a:	f001 fd6c 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2108      	movs	r1, #8
 8000a22:	481e      	ldr	r0, [pc, #120]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a24:	f001 fd67 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	481b      	ldr	r0, [pc, #108]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a2e:	f001 fd62 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000a32:	2200      	movs	r2, #0
 8000a34:	2120      	movs	r1, #32
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a38:	f001 fd5d 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2140      	movs	r1, #64	; 0x40
 8000a40:	4816      	ldr	r0, [pc, #88]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a42:	f001 fd58 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000a46:	e024      	b.n	8000a92 <displaySEG7_1+0x312>

	case 9:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a4e:	f001 fd52 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000a52:	2200      	movs	r2, #0
 8000a54:	2102      	movs	r1, #2
 8000a56:	4811      	ldr	r0, [pc, #68]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a58:	f001 fd4d 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2104      	movs	r1, #4
 8000a60:	480e      	ldr	r0, [pc, #56]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a62:	f001 fd48 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a6c:	f001 fd43 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000a70:	2201      	movs	r2, #1
 8000a72:	2110      	movs	r1, #16
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a76:	f001 fd3e 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a80:	f001 fd39 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000a84:	2200      	movs	r2, #0
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <displaySEG7_1+0x31c>)
 8000a8a:	f001 fd34 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000a8e:	e000      	b.n	8000a92 <displaySEG7_1+0x312>

	default:
		break;
 8000a90:	bf00      	nop
	}
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40010c00 	.word	0x40010c00

08000aa0 <displaySEG7_2>:


void displaySEG7_2(int num){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b09      	cmp	r3, #9
 8000aac:	f200 81bc 	bhi.w	8000e28 <displaySEG7_2+0x388>
 8000ab0:	a201      	add	r2, pc, #4	; (adr r2, 8000ab8 <displaySEG7_2+0x18>)
 8000ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab6:	bf00      	nop
 8000ab8:	08000ae1 	.word	0x08000ae1
 8000abc:	08000b35 	.word	0x08000b35
 8000ac0:	08000b89 	.word	0x08000b89
 8000ac4:	08000bdd 	.word	0x08000bdd
 8000ac8:	08000c31 	.word	0x08000c31
 8000acc:	08000c85 	.word	0x08000c85
 8000ad0:	08000cd9 	.word	0x08000cd9
 8000ad4:	08000d2d 	.word	0x08000d2d
 8000ad8:	08000d81 	.word	0x08000d81
 8000adc:	08000dd5 	.word	0x08000dd5
switch(num){
	case 0:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	48d3      	ldr	r0, [pc, #844]	; (8000e34 <displaySEG7_2+0x394>)
 8000ae6:	f001 fd06 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	48d0      	ldr	r0, [pc, #832]	; (8000e34 <displaySEG7_2+0x394>)
 8000af2:	f001 fd00 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	48cd      	ldr	r0, [pc, #820]	; (8000e34 <displaySEG7_2+0x394>)
 8000afe:	f001 fcfa 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b08:	48ca      	ldr	r0, [pc, #808]	; (8000e34 <displaySEG7_2+0x394>)
 8000b0a:	f001 fcf4 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b14:	48c7      	ldr	r0, [pc, #796]	; (8000e34 <displaySEG7_2+0x394>)
 8000b16:	f001 fcee 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b20:	48c4      	ldr	r0, [pc, #784]	; (8000e34 <displaySEG7_2+0x394>)
 8000b22:	f001 fce8 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2c:	48c1      	ldr	r0, [pc, #772]	; (8000e34 <displaySEG7_2+0x394>)
 8000b2e:	f001 fce2 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000b32:	e17a      	b.n	8000e2a <displaySEG7_2+0x38a>

	case 1:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 ) ;
 8000b34:	2201      	movs	r2, #1
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	48be      	ldr	r0, [pc, #760]	; (8000e34 <displaySEG7_2+0x394>)
 8000b3a:	f001 fcdc 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	48bb      	ldr	r0, [pc, #748]	; (8000e34 <displaySEG7_2+0x394>)
 8000b46:	f001 fcd6 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b50:	48b8      	ldr	r0, [pc, #736]	; (8000e34 <displaySEG7_2+0x394>)
 8000b52:	f001 fcd0 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5c:	48b5      	ldr	r0, [pc, #724]	; (8000e34 <displaySEG7_2+0x394>)
 8000b5e:	f001 fcca 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b68:	48b2      	ldr	r0, [pc, #712]	; (8000e34 <displaySEG7_2+0x394>)
 8000b6a:	f001 fcc4 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b74:	48af      	ldr	r0, [pc, #700]	; (8000e34 <displaySEG7_2+0x394>)
 8000b76:	f001 fcbe 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b80:	48ac      	ldr	r0, [pc, #688]	; (8000e34 <displaySEG7_2+0x394>)
 8000b82:	f001 fcb8 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000b86:	e150      	b.n	8000e2a <displaySEG7_2+0x38a>

	case 2:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	48a9      	ldr	r0, [pc, #676]	; (8000e34 <displaySEG7_2+0x394>)
 8000b8e:	f001 fcb2 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b98:	48a6      	ldr	r0, [pc, #664]	; (8000e34 <displaySEG7_2+0x394>)
 8000b9a:	f001 fcac 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 1 ) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba4:	48a3      	ldr	r0, [pc, #652]	; (8000e34 <displaySEG7_2+0x394>)
 8000ba6:	f001 fca6 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb0:	48a0      	ldr	r0, [pc, #640]	; (8000e34 <displaySEG7_2+0x394>)
 8000bb2:	f001 fca0 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbc:	489d      	ldr	r0, [pc, #628]	; (8000e34 <displaySEG7_2+0x394>)
 8000bbe:	f001 fc9a 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc8:	489a      	ldr	r0, [pc, #616]	; (8000e34 <displaySEG7_2+0x394>)
 8000bca:	f001 fc94 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	4897      	ldr	r0, [pc, #604]	; (8000e34 <displaySEG7_2+0x394>)
 8000bd6:	f001 fc8e 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000bda:	e126      	b.n	8000e2a <displaySEG7_2+0x38a>

	case 3:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	4894      	ldr	r0, [pc, #592]	; (8000e34 <displaySEG7_2+0x394>)
 8000be2:	f001 fc88 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bec:	4891      	ldr	r0, [pc, #580]	; (8000e34 <displaySEG7_2+0x394>)
 8000bee:	f001 fc82 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf8:	488e      	ldr	r0, [pc, #568]	; (8000e34 <displaySEG7_2+0x394>)
 8000bfa:	f001 fc7c 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c04:	488b      	ldr	r0, [pc, #556]	; (8000e34 <displaySEG7_2+0x394>)
 8000c06:	f001 fc76 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c10:	4888      	ldr	r0, [pc, #544]	; (8000e34 <displaySEG7_2+0x394>)
 8000c12:	f001 fc70 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1c:	4885      	ldr	r0, [pc, #532]	; (8000e34 <displaySEG7_2+0x394>)
 8000c1e:	f001 fc6a 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c28:	4882      	ldr	r0, [pc, #520]	; (8000e34 <displaySEG7_2+0x394>)
 8000c2a:	f001 fc64 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000c2e:	e0fc      	b.n	8000e2a <displaySEG7_2+0x38a>

	case 4:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 ) ;
 8000c30:	2201      	movs	r2, #1
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	487f      	ldr	r0, [pc, #508]	; (8000e34 <displaySEG7_2+0x394>)
 8000c36:	f001 fc5e 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c40:	487c      	ldr	r0, [pc, #496]	; (8000e34 <displaySEG7_2+0x394>)
 8000c42:	f001 fc58 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4c:	4879      	ldr	r0, [pc, #484]	; (8000e34 <displaySEG7_2+0x394>)
 8000c4e:	f001 fc52 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c58:	4876      	ldr	r0, [pc, #472]	; (8000e34 <displaySEG7_2+0x394>)
 8000c5a:	f001 fc4c 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	4873      	ldr	r0, [pc, #460]	; (8000e34 <displaySEG7_2+0x394>)
 8000c66:	f001 fc46 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c70:	4870      	ldr	r0, [pc, #448]	; (8000e34 <displaySEG7_2+0x394>)
 8000c72:	f001 fc40 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7c:	486d      	ldr	r0, [pc, #436]	; (8000e34 <displaySEG7_2+0x394>)
 8000c7e:	f001 fc3a 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000c82:	e0d2      	b.n	8000e2a <displaySEG7_2+0x38a>
	case 5:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000c84:	2200      	movs	r2, #0
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	486a      	ldr	r0, [pc, #424]	; (8000e34 <displaySEG7_2+0x394>)
 8000c8a:	f001 fc34 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 ) ;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	4867      	ldr	r0, [pc, #412]	; (8000e34 <displaySEG7_2+0x394>)
 8000c96:	f001 fc2e 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca0:	4864      	ldr	r0, [pc, #400]	; (8000e34 <displaySEG7_2+0x394>)
 8000ca2:	f001 fc28 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cac:	4861      	ldr	r0, [pc, #388]	; (8000e34 <displaySEG7_2+0x394>)
 8000cae:	f001 fc22 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb8:	485e      	ldr	r0, [pc, #376]	; (8000e34 <displaySEG7_2+0x394>)
 8000cba:	f001 fc1c 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc4:	485b      	ldr	r0, [pc, #364]	; (8000e34 <displaySEG7_2+0x394>)
 8000cc6:	f001 fc16 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	4858      	ldr	r0, [pc, #352]	; (8000e34 <displaySEG7_2+0x394>)
 8000cd2:	f001 fc10 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000cd6:	e0a8      	b.n	8000e2a <displaySEG7_2+0x38a>

	case 6:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2180      	movs	r1, #128	; 0x80
 8000cdc:	4855      	ldr	r0, [pc, #340]	; (8000e34 <displaySEG7_2+0x394>)
 8000cde:	f001 fc0a 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 ) ;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce8:	4852      	ldr	r0, [pc, #328]	; (8000e34 <displaySEG7_2+0x394>)
 8000cea:	f001 fc04 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf4:	484f      	ldr	r0, [pc, #316]	; (8000e34 <displaySEG7_2+0x394>)
 8000cf6:	f001 fbfe 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	484c      	ldr	r0, [pc, #304]	; (8000e34 <displaySEG7_2+0x394>)
 8000d02:	f001 fbf8 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0c:	4849      	ldr	r0, [pc, #292]	; (8000e34 <displaySEG7_2+0x394>)
 8000d0e:	f001 fbf2 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d18:	4846      	ldr	r0, [pc, #280]	; (8000e34 <displaySEG7_2+0x394>)
 8000d1a:	f001 fbec 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d24:	4843      	ldr	r0, [pc, #268]	; (8000e34 <displaySEG7_2+0x394>)
 8000d26:	f001 fbe6 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000d2a:	e07e      	b.n	8000e2a <displaySEG7_2+0x38a>

	case 7:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	4840      	ldr	r0, [pc, #256]	; (8000e34 <displaySEG7_2+0x394>)
 8000d32:	f001 fbe0 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3c:	483d      	ldr	r0, [pc, #244]	; (8000e34 <displaySEG7_2+0x394>)
 8000d3e:	f001 fbda 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d48:	483a      	ldr	r0, [pc, #232]	; (8000e34 <displaySEG7_2+0x394>)
 8000d4a:	f001 fbd4 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d54:	4837      	ldr	r0, [pc, #220]	; (8000e34 <displaySEG7_2+0x394>)
 8000d56:	f001 fbce 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d60:	4834      	ldr	r0, [pc, #208]	; (8000e34 <displaySEG7_2+0x394>)
 8000d62:	f001 fbc8 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6c:	4831      	ldr	r0, [pc, #196]	; (8000e34 <displaySEG7_2+0x394>)
 8000d6e:	f001 fbc2 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d78:	482e      	ldr	r0, [pc, #184]	; (8000e34 <displaySEG7_2+0x394>)
 8000d7a:	f001 fbbc 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000d7e:	e054      	b.n	8000e2a <displaySEG7_2+0x38a>

	case 8:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000d80:	2200      	movs	r2, #0
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	482b      	ldr	r0, [pc, #172]	; (8000e34 <displaySEG7_2+0x394>)
 8000d86:	f001 fbb6 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d90:	4828      	ldr	r0, [pc, #160]	; (8000e34 <displaySEG7_2+0x394>)
 8000d92:	f001 fbb0 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	4825      	ldr	r0, [pc, #148]	; (8000e34 <displaySEG7_2+0x394>)
 8000d9e:	f001 fbaa 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da8:	4822      	ldr	r0, [pc, #136]	; (8000e34 <displaySEG7_2+0x394>)
 8000daa:	f001 fba4 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	481f      	ldr	r0, [pc, #124]	; (8000e34 <displaySEG7_2+0x394>)
 8000db6:	f001 fb9e 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc0:	481c      	ldr	r0, [pc, #112]	; (8000e34 <displaySEG7_2+0x394>)
 8000dc2:	f001 fb98 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	4819      	ldr	r0, [pc, #100]	; (8000e34 <displaySEG7_2+0x394>)
 8000dce:	f001 fb92 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000dd2:	e02a      	b.n	8000e2a <displaySEG7_2+0x38a>

	case 9:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	4816      	ldr	r0, [pc, #88]	; (8000e34 <displaySEG7_2+0x394>)
 8000dda:	f001 fb8c 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de4:	4813      	ldr	r0, [pc, #76]	; (8000e34 <displaySEG7_2+0x394>)
 8000de6:	f001 fb86 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <displaySEG7_2+0x394>)
 8000df2:	f001 fb80 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <displaySEG7_2+0x394>)
 8000dfe:	f001 fb7a 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <displaySEG7_2+0x394>)
 8000e0a:	f001 fb74 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <displaySEG7_2+0x394>)
 8000e16:	f001 fb6e 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <displaySEG7_2+0x394>)
 8000e22:	f001 fb68 	bl	80024f6 <HAL_GPIO_WritePin>
		break;
 8000e26:	e000      	b.n	8000e2a <displaySEG7_2+0x38a>

	default:
		break;
 8000e28:	bf00      	nop
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010c00 	.word	0x40010c00

08000e38 <enable0>:
void enable0(){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <enable0+0x20>)
 8000e44:	f001 fb57 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4e:	4802      	ldr	r0, [pc, #8]	; (8000e58 <enable0+0x20>)
 8000e50:	f001 fb51 	bl	80024f6 <HAL_GPIO_WritePin>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010800 	.word	0x40010800

08000e5c <enable1>:

void enable1(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <enable1+0x20>)
 8000e68:	f001 fb45 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e72:	4802      	ldr	r0, [pc, #8]	; (8000e7c <enable1+0x20>)
 8000e74:	f001 fb3f 	bl	80024f6 <HAL_GPIO_WritePin>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40010800 	.word	0x40010800

08000e80 <enable2>:

void enable2(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <enable2+0x20>)
 8000e8c:	f001 fb33 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <enable2+0x20>)
 8000e98:	f001 fb2d 	bl	80024f6 <HAL_GPIO_WritePin>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <enable3>:

void enable3(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <enable3+0x20>)
 8000eb0:	f001 fb21 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eba:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <enable3+0x20>)
 8000ebc:	f001 fb1b 	bl	80024f6 <HAL_GPIO_WritePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <enable4>:
void enable4(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <enable4+0x20>)
 8000ed4:	f001 fb0f 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ede:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <enable4+0x20>)
 8000ee0:	f001 fb09 	bl	80024f6 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40010800 	.word	0x40010800

08000eec <enable5>:

void enable5(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <enable5+0x20>)
 8000ef8:	f001 fafd 	bl	80024f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f02:	4802      	ldr	r0, [pc, #8]	; (8000f0c <enable5+0x20>)
 8000f04:	f001 faf7 	bl	80024f6 <HAL_GPIO_WritePin>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40010800 	.word	0x40010800

08000f10 <showTimeDelay_First>:
void showTimeDelay_First(int first, int second){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	first--;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
	second--;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	603b      	str	r3, [r7, #0]
	enable0();
 8000f26:	f7ff ff87 	bl	8000e38 <enable0>
	displaySEG7_1(first/10);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <showTimeDelay_First+0x50>)
 8000f2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f32:	1092      	asrs	r2, r2, #2
 8000f34:	17db      	asrs	r3, r3, #31
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fc21 	bl	8000780 <displaySEG7_1>
	enable2();
 8000f3e:	f7ff ff9f 	bl	8000e80 <enable2>
	displaySEG7_2(second/10);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <showTimeDelay_First+0x50>)
 8000f46:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4a:	1092      	asrs	r2, r2, #2
 8000f4c:	17db      	asrs	r3, r3, #31
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fda5 	bl	8000aa0 <displaySEG7_2>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	66666667 	.word	0x66666667

08000f64 <showTimeDelay_Second>:

void showTimeDelay_Second(int first, int second){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	first--;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
	second--;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	603b      	str	r3, [r7, #0]
	enable1();
 8000f7a:	f7ff ff6f 	bl	8000e5c <enable1>
	displaySEG7_1(first%10);
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <showTimeDelay_Second+0x64>)
 8000f82:	fb83 1302 	smull	r1, r3, r3, r2
 8000f86:	1099      	asrs	r1, r3, #2
 8000f88:	17d3      	asrs	r3, r2, #31
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	1ad1      	subs	r1, r2, r3
 8000f96:	4608      	mov	r0, r1
 8000f98:	f7ff fbf2 	bl	8000780 <displaySEG7_1>
	enable3();
 8000f9c:	f7ff ff82 	bl	8000ea4 <enable3>
	displaySEG7_2(second%10);
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <showTimeDelay_Second+0x64>)
 8000fa4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa8:	1099      	asrs	r1, r3, #2
 8000faa:	17d3      	asrs	r3, r2, #31
 8000fac:	1ac9      	subs	r1, r1, r3
 8000fae:	460b      	mov	r3, r1
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	1ad1      	subs	r1, r2, r3
 8000fb8:	4608      	mov	r0, r1
 8000fba:	f7ff fd71 	bl	8000aa0 <displaySEG7_2>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	66666667 	.word	0x66666667

08000fcc <showTimeDelay1>:
void showTimeDelay1(int delaytime){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	delaytime--;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
	enable4();
 8000fda:	f7ff ff75 	bl	8000ec8 <enable4>
	displaySEG7_1(delaytime/10);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <showTimeDelay1+0x30>)
 8000fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe6:	1092      	asrs	r2, r2, #2
 8000fe8:	17db      	asrs	r3, r3, #31
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fbc7 	bl	8000780 <displaySEG7_1>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	66666667 	.word	0x66666667

08001000 <showTimeDelay2>:
void showTimeDelay2(int delaytime){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	delaytime--;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
	enable5();
 800100e:	f7ff ff6d 	bl	8000eec <enable5>
	displaySEG7_2(delaytime%10);
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <showTimeDelay2+0x38>)
 8001016:	fb83 1302 	smull	r1, r3, r3, r2
 800101a:	1099      	asrs	r1, r3, #2
 800101c:	17d3      	asrs	r3, r2, #31
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	460b      	mov	r3, r1
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	1ad1      	subs	r1, r2, r3
 800102a:	4608      	mov	r0, r1
 800102c:	f7ff fd38 	bl	8000aa0 <displaySEG7_2>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	66666667 	.word	0x66666667

0800103c <setValues>:


int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void){
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

	modeSeg = FIRST;
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <setValues+0x34>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <setValues+0x38>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <setValues+0x3c>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
	seg7AutoState = FIRST;
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <setValues+0x40>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <setValues+0x44>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a09      	ldr	r2, [pc, #36]	; (8001084 <setValues+0x48>)
 800105e:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <setValues+0x4c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a09      	ldr	r2, [pc, #36]	; (800108c <setValues+0x50>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	200000f4 	.word	0x200000f4
 8001074:	200000f6 	.word	0x200000f6
 8001078:	200000f5 	.word	0x200000f5
 800107c:	200000fc 	.word	0x200000fc
 8001080:	20000040 	.word	0x20000040
 8001084:	20000100 	.word	0x20000100
 8001088:	20000044 	.word	0x20000044
 800108c:	200000f8 	.word	0x200000f8

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f000 fe7c 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f828 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f000 f8d8 	bl	8001250 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010a0:	f000 f860 	bl	8001164 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80010a4:	f000 f8aa 	bl	80011fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <main+0x50>)
 80010aa:	f001 fecf 	bl	8002e4c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80010ae:	f000 fb07 	bl	80016c0 <SCH_Init>

	SCH_Add_Task(seg_fsm, 100, 50);
 80010b2:	2232      	movs	r2, #50	; 0x32
 80010b4:	2164      	movs	r1, #100	; 0x64
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <main+0x54>)
 80010b8:	f000 fbce 	bl	8001858 <SCH_Add_Task>
	SCH_Add_Task(RED_GREEN, 110, 100);
 80010bc:	2264      	movs	r2, #100	; 0x64
 80010be:	216e      	movs	r1, #110	; 0x6e
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <main+0x58>)
 80010c2:	f000 fbc9 	bl	8001858 <SCH_Add_Task>
  setValues();
 80010c6:	f7ff ffb9 	bl	800103c <setValues>
  displayFirstLedCouple(LED_INIT);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fa98 	bl	8000600 <displayFirstLedCouple>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  auto_run();
//	  manual_run();
	  SCH_Dispatch_Task();
 80010d0:	f000 fc20 	bl	8001914 <SCH_Dispatch_Task>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80010d4:	2101      	movs	r1, #1
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 fa3e 	bl	8002558 <HAL_PWR_EnterSLEEPMode>
	  SCH_Dispatch_Task();
 80010dc:	e7f8      	b.n	80010d0 <main+0x40>
 80010de:	bf00      	nop
 80010e0:	20000104 	.word	0x20000104
 80010e4:	08000405 	.word	0x08000405
 80010e8:	0800014d 	.word	0x0800014d

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b090      	sub	sp, #64	; 0x40
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	2228      	movs	r2, #40	; 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 f88c 	bl	8004218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001116:	2310      	movs	r3, #16
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fa34 	bl	8002590 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800112e:	f000 f91b 	bl	8001368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fca0 	bl	8002a90 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001156:	f000 f907 	bl	8001368 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3740      	adds	r7, #64	; 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_TIM2_Init+0x94>)
 8001182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001186:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_TIM2_Init+0x94>)
 800118a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800118e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_TIM2_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_TIM2_Init+0x94>)
 8001198:	220a      	movs	r2, #10
 800119a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_TIM2_Init+0x94>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_TIM2_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <MX_TIM2_Init+0x94>)
 80011aa:	f001 fdff 	bl	8002dac <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b4:	f000 f8d8 	bl	8001368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM2_Init+0x94>)
 80011c6:	f001 ff95 	bl	80030f4 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d0:	f000 f8ca 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM2_Init+0x94>)
 80011e2:	f002 f961 	bl	80034a8 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011ec:	f000 f8bc 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000104 	.word	0x20000104

080011fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_USART2_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001208:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800120c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001234:	f002 f9a2 	bl	800357c <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f000 f893 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000014c 	.word	0x2000014c
 800124c:	40004400 	.word	0x40004400

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <MX_GPIO_Init+0xec>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a34      	ldr	r2, [pc, #208]	; (800133c <MX_GPIO_Init+0xec>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b32      	ldr	r3, [pc, #200]	; (800133c <MX_GPIO_Init+0xec>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b2f      	ldr	r3, [pc, #188]	; (800133c <MX_GPIO_Init+0xec>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a2e      	ldr	r2, [pc, #184]	; (800133c <MX_GPIO_Init+0xec>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <MX_GPIO_Init+0xec>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <MX_GPIO_Init+0xec>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a28      	ldr	r2, [pc, #160]	; (800133c <MX_GPIO_Init+0xec>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <MX_GPIO_Init+0xec>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80012ac:	2201      	movs	r2, #1
 80012ae:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80012b2:	4823      	ldr	r0, [pc, #140]	; (8001340 <MX_GPIO_Init+0xf0>)
 80012b4:	f001 f91f 	bl	80024f6 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|D2_Pin
 80012b8:	2200      	movs	r2, #0
 80012ba:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80012be:	4821      	ldr	r0, [pc, #132]	; (8001344 <MX_GPIO_Init+0xf4>)
 80012c0:	f001 f919 	bl	80024f6 <HAL_GPIO_WritePin>
                          |E2_Pin|F2_Pin|G2_Pin|D1_Pin
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80012c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	481b      	ldr	r0, [pc, #108]	; (8001348 <MX_GPIO_Init+0xf8>)
 80012da:	f000 ff7b 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 80012de:	2302      	movs	r3, #2
 80012e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4619      	mov	r1, r3
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <MX_GPIO_Init+0xf0>)
 80012f2:	f000 ff6f 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin EN5_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80012f6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80012fa:	613b      	str	r3, [r7, #16]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2302      	movs	r3, #2
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <MX_GPIO_Init+0xf0>)
 8001310:	f000 ff60 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin D2_Pin
                           E2_Pin F2_Pin G2_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin A2_Pin
                           B2_Pin C2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D2_Pin
 8001314:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001318:	613b      	str	r3, [r7, #16]
                          |E2_Pin|F2_Pin|G2_Pin|D1_Pin
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2302      	movs	r3, #2
 8001324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_GPIO_Init+0xf4>)
 800132e:	f000 ff51 	bl	80021d4 <HAL_GPIO_Init>

}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800
 8001344:	40010c00 	.word	0x40010c00
 8001348:	40011000 	.word	0x40011000

0800134c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef * htim ) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	update_time();
 8001354:	f000 fb96 	bl	8001a84 <update_time>
	SCH_Update();
 8001358:	f000 f9f8 	bl	800174c <SCH_Update>
	getKeyInput();
 800135c:	f7ff f8a6 	bl	80004ac <getKeyInput>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	e7fe      	b.n	8001370 <Error_Handler+0x8>
	...

08001374 <displayIncreaseRed>:
			break;
		default:
			break;
	}
}
void displayIncreaseRed(){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	switch(modeSeg){
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <displayIncreaseRed+0x3c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <displayIncreaseRed+0x12>
 8001380:	2b01      	cmp	r3, #1
 8001382:	d009      	beq.n	8001398 <displayIncreaseRed+0x24>
		case SECOND:
			showTimeDelay2(redDelay);
			modeSeg = FIRST;
			break;
		default:
			break;
 8001384:	e011      	b.n	80013aa <displayIncreaseRed+0x36>
			showTimeDelay1(redDelay);
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <displayIncreaseRed+0x40>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe1e 	bl	8000fcc <showTimeDelay1>
			modeSeg = SECOND;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <displayIncreaseRed+0x3c>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
			break;
 8001396:	e008      	b.n	80013aa <displayIncreaseRed+0x36>
			showTimeDelay2(redDelay);
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <displayIncreaseRed+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe2f 	bl	8001000 <showTimeDelay2>
			modeSeg = FIRST;
 80013a2:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <displayIncreaseRed+0x3c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
			break;
 80013a8:	bf00      	nop
	}
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200000f4 	.word	0x200000f4
 80013b4:	20000040 	.word	0x20000040

080013b8 <displayIncreaseYellow>:
void displayIncreaseYellow(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	switch(modeSeg){
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <displayIncreaseYellow+0x3c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <displayIncreaseYellow+0x12>
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d009      	beq.n	80013dc <displayIncreaseYellow+0x24>
		case SECOND:
			showTimeDelay2(yellowDelay);
			modeSeg = FIRST;
			break;
		default:
			break;
 80013c8:	e011      	b.n	80013ee <displayIncreaseYellow+0x36>
			showTimeDelay1(yellowDelay);
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <displayIncreaseYellow+0x40>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fdfc 	bl	8000fcc <showTimeDelay1>
			modeSeg = SECOND;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <displayIncreaseYellow+0x3c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
			break;
 80013da:	e008      	b.n	80013ee <displayIncreaseYellow+0x36>
			showTimeDelay2(yellowDelay);
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <displayIncreaseYellow+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fe0d 	bl	8001000 <showTimeDelay2>
			modeSeg = FIRST;
 80013e6:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <displayIncreaseYellow+0x3c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
			break;
 80013ec:	bf00      	nop
	}
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200000f4 	.word	0x200000f4
 80013f8:	20000048 	.word	0x20000048

080013fc <displayIncreaseGreen>:
void displayIncreaseGreen(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	switch(modeSeg){
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <displayIncreaseGreen+0x3c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <displayIncreaseGreen+0x12>
 8001408:	2b01      	cmp	r3, #1
 800140a:	d009      	beq.n	8001420 <displayIncreaseGreen+0x24>
		case SECOND:
			showTimeDelay2(greenDelay);
			modeSeg = FIRST;
			break;
		default:
			break;
 800140c:	e011      	b.n	8001432 <displayIncreaseGreen+0x36>
			showTimeDelay1(greenDelay);
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <displayIncreaseGreen+0x40>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fdda 	bl	8000fcc <showTimeDelay1>
			modeSeg = SECOND;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <displayIncreaseGreen+0x3c>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
			break;
 800141e:	e008      	b.n	8001432 <displayIncreaseGreen+0x36>
			showTimeDelay2(greenDelay);
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <displayIncreaseGreen+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fdeb 	bl	8001000 <showTimeDelay2>
			modeSeg = FIRST;
 800142a:	4b03      	ldr	r3, [pc, #12]	; (8001438 <displayIncreaseGreen+0x3c>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
			break;
 8001430:	bf00      	nop
	}
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200000f4 	.word	0x200000f4
 800143c:	20000044 	.word	0x20000044

08001440 <MODE2>:
int isDispatch = 0;
void MODE2(){
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( RED1_GPIO_Port , RED1_Pin) ;
 8001444:	2110      	movs	r1, #16
 8001446:	482d      	ldr	r0, [pc, #180]	; (80014fc <MODE2+0xbc>)
 8001448:	f001 f86d 	bl	8002526 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin( RED2_GPIO_Port , RED2_Pin) ;
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	482b      	ldr	r0, [pc, #172]	; (80014fc <MODE2+0xbc>)
 8001450:	f001 f869 	bl	8002526 <HAL_GPIO_TogglePin>
	if (isButtonPressed(1)==1){
 8001454:	2001      	movs	r0, #1
 8001456:	f7fe ffff 	bl	8000458 <isButtonPressed>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d110      	bne.n	8001482 <MODE2+0x42>
		redDelay +=1;
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <MODE2+0xc0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a26      	ldr	r2, [pc, #152]	; (8001500 <MODE2+0xc0>)
 8001468:	6013      	str	r3, [r2, #0]
		greenDelay +=1;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MODE2+0xc4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	4a24      	ldr	r2, [pc, #144]	; (8001504 <MODE2+0xc4>)
 8001472:	6013      	str	r3, [r2, #0]

		if(redDelay >= 99) redDelay = 1;
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MODE2+0xc0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b62      	cmp	r3, #98	; 0x62
 800147a:	dd02      	ble.n	8001482 <MODE2+0x42>
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MODE2+0xc0>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
	}
	if (isButtonPressed(2)==1){
 8001482:	2002      	movs	r0, #2
 8001484:	f7fe ffe8 	bl	8000458 <isButtonPressed>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d117      	bne.n	80014be <MODE2+0x7e>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001494:	4819      	ldr	r0, [pc, #100]	; (80014fc <MODE2+0xbc>)
 8001496:	f001 f82e 	bl	80024f6 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
		setValues();
 800149a:	f7ff fdcf 	bl	800103c <setValues>
		SCH_Delete_Task(0);
 800149e:	2000      	movs	r0, #0
 80014a0:	f000 fa9e 	bl	80019e0 <SCH_Delete_Task>
		SCH_Delete_Task(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f000 fa9b 	bl	80019e0 <SCH_Delete_Task>
		SCH_Add_Task(seg_fsm, 1, 50);
 80014aa:	2232      	movs	r2, #50	; 0x32
 80014ac:	2101      	movs	r1, #1
 80014ae:	4816      	ldr	r0, [pc, #88]	; (8001508 <MODE2+0xc8>)
 80014b0:	f000 f9d2 	bl	8001858 <SCH_Add_Task>
		SCH_Add_Task(RED_GREEN, 1, 100);
 80014b4:	2264      	movs	r2, #100	; 0x64
 80014b6:	2101      	movs	r1, #1
 80014b8:	4814      	ldr	r0, [pc, #80]	; (800150c <MODE2+0xcc>)
 80014ba:	f000 f9cd 	bl	8001858 <SCH_Add_Task>

	}
	if (isButtonPressed(0) == 1){
 80014be:	2000      	movs	r0, #0
 80014c0:	f7fe ffca 	bl	8000458 <isButtonPressed>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d115      	bne.n	80014f6 <MODE2+0xb6>
		HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <MODE2+0xbc>)
 80014d2:	f001 f810 	bl	80024f6 <HAL_GPIO_WritePin>
														  |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_SET);
		SCH_Delete_Task(0);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 fa82 	bl	80019e0 <SCH_Delete_Task>
		SCH_Delete_Task(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 fa7f 	bl	80019e0 <SCH_Delete_Task>
		SCH_Add_Task(MODE3, 1, 50);
 80014e2:	2232      	movs	r2, #50	; 0x32
 80014e4:	2101      	movs	r1, #1
 80014e6:	480a      	ldr	r0, [pc, #40]	; (8001510 <MODE2+0xd0>)
 80014e8:	f000 f9b6 	bl	8001858 <SCH_Add_Task>
		SCH_Add_Task(displayIncreaseYellow, 1, 50);
 80014ec:	2232      	movs	r2, #50	; 0x32
 80014ee:	2101      	movs	r1, #1
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <MODE2+0xd4>)
 80014f2:	f000 f9b1 	bl	8001858 <SCH_Add_Task>
	}
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40010800 	.word	0x40010800
 8001500:	20000040 	.word	0x20000040
 8001504:	20000044 	.word	0x20000044
 8001508:	08000405 	.word	0x08000405
 800150c:	0800014d 	.word	0x0800014d
 8001510:	08001519 	.word	0x08001519
 8001514:	080013b9 	.word	0x080013b9

08001518 <MODE3>:
void MODE3(){
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( YELLOW1_GPIO_Port , YELLOW1_Pin) ;
 800151c:	2120      	movs	r1, #32
 800151e:	482d      	ldr	r0, [pc, #180]	; (80015d4 <MODE3+0xbc>)
 8001520:	f001 f801 	bl	8002526 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin( YELLOW2_GPIO_Port , YELLOW2_Pin) ;
 8001524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001528:	482a      	ldr	r0, [pc, #168]	; (80015d4 <MODE3+0xbc>)
 800152a:	f000 fffc 	bl	8002526 <HAL_GPIO_TogglePin>
	if (isButtonPressed(1)==1){
 800152e:	2001      	movs	r0, #1
 8001530:	f7fe ff92 	bl	8000458 <isButtonPressed>
 8001534:	4603      	mov	r3, r0
 8001536:	2b01      	cmp	r3, #1
 8001538:	d110      	bne.n	800155c <MODE3+0x44>
		yellowDelay +=1;
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <MODE3+0xc0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <MODE3+0xc0>)
 8001542:	6013      	str	r3, [r2, #0]
		redDelay+=1;
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <MODE3+0xc4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	4a24      	ldr	r2, [pc, #144]	; (80015dc <MODE3+0xc4>)
 800154c:	6013      	str	r3, [r2, #0]

		if(yellowDelay >= 99) yellowDelay = 1;
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <MODE3+0xc0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b62      	cmp	r3, #98	; 0x62
 8001554:	dd02      	ble.n	800155c <MODE3+0x44>
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <MODE3+0xc0>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
	}
	if (isButtonPressed(2)==1){
 800155c:	2002      	movs	r0, #2
 800155e:	f7fe ff7b 	bl	8000458 <isButtonPressed>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d117      	bne.n	8001598 <MODE3+0x80>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800156e:	4819      	ldr	r0, [pc, #100]	; (80015d4 <MODE3+0xbc>)
 8001570:	f000 ffc1 	bl	80024f6 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
		setValues();
 8001574:	f7ff fd62 	bl	800103c <setValues>
		SCH_Delete_Task(0);
 8001578:	2000      	movs	r0, #0
 800157a:	f000 fa31 	bl	80019e0 <SCH_Delete_Task>
		SCH_Delete_Task(1);
 800157e:	2001      	movs	r0, #1
 8001580:	f000 fa2e 	bl	80019e0 <SCH_Delete_Task>
		SCH_Add_Task(seg_fsm, 1, 50);
 8001584:	2232      	movs	r2, #50	; 0x32
 8001586:	2101      	movs	r1, #1
 8001588:	4815      	ldr	r0, [pc, #84]	; (80015e0 <MODE3+0xc8>)
 800158a:	f000 f965 	bl	8001858 <SCH_Add_Task>
		SCH_Add_Task(RED_GREEN, 1, 100);
 800158e:	2264      	movs	r2, #100	; 0x64
 8001590:	2101      	movs	r1, #1
 8001592:	4814      	ldr	r0, [pc, #80]	; (80015e4 <MODE3+0xcc>)
 8001594:	f000 f960 	bl	8001858 <SCH_Add_Task>
	}
	if (isButtonPressed(0) == 1){
 8001598:	2000      	movs	r0, #0
 800159a:	f7fe ff5d 	bl	8000458 <isButtonPressed>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d115      	bne.n	80015d0 <MODE3+0xb8>
		HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <MODE3+0xbc>)
 80015ac:	f000 ffa3 	bl	80024f6 <HAL_GPIO_WritePin>
														  |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_SET);
		SCH_Delete_Task(0);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 fa15 	bl	80019e0 <SCH_Delete_Task>
		SCH_Delete_Task(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 fa12 	bl	80019e0 <SCH_Delete_Task>
		SCH_Add_Task(MODE4, 1, 50);
 80015bc:	2232      	movs	r2, #50	; 0x32
 80015be:	2101      	movs	r1, #1
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <MODE3+0xd0>)
 80015c2:	f000 f949 	bl	8001858 <SCH_Add_Task>
		SCH_Add_Task(displayIncreaseGreen, 1, 50);
 80015c6:	2232      	movs	r2, #50	; 0x32
 80015c8:	2101      	movs	r1, #1
 80015ca:	4808      	ldr	r0, [pc, #32]	; (80015ec <MODE3+0xd4>)
 80015cc:	f000 f944 	bl	8001858 <SCH_Add_Task>
	}
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40010800 	.word	0x40010800
 80015d8:	20000048 	.word	0x20000048
 80015dc:	20000040 	.word	0x20000040
 80015e0:	08000405 	.word	0x08000405
 80015e4:	0800014d 	.word	0x0800014d
 80015e8:	080015f1 	.word	0x080015f1
 80015ec:	080013fd 	.word	0x080013fd

080015f0 <MODE4>:
void MODE4(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin( GREEN1_GPIO_Port , GREEN1_Pin) ;
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	482d      	ldr	r0, [pc, #180]	; (80016ac <MODE4+0xbc>)
 80015f8:	f000 ff95 	bl	8002526 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin( GREEN2_GPIO_Port , GREEN2_Pin) ;
 80015fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001600:	482a      	ldr	r0, [pc, #168]	; (80016ac <MODE4+0xbc>)
 8001602:	f000 ff90 	bl	8002526 <HAL_GPIO_TogglePin>
	if (isButtonPressed(1)==1){
 8001606:	2001      	movs	r0, #1
 8001608:	f7fe ff26 	bl	8000458 <isButtonPressed>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d110      	bne.n	8001634 <MODE4+0x44>
		redDelay +=1;
 8001612:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <MODE4+0xc0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <MODE4+0xc0>)
 800161a:	6013      	str	r3, [r2, #0]
		greenDelay +=1;
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <MODE4+0xc4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <MODE4+0xc4>)
 8001624:	6013      	str	r3, [r2, #0]

		if(greenDelay >= 99) greenDelay = 1;
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <MODE4+0xc4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b62      	cmp	r3, #98	; 0x62
 800162c:	dd02      	ble.n	8001634 <MODE4+0x44>
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <MODE4+0xc4>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]
	}
	if (isButtonPressed(2)==1){
 8001634:	2002      	movs	r0, #2
 8001636:	f7fe ff0f 	bl	8000458 <isButtonPressed>
 800163a:	4603      	mov	r3, r0
 800163c:	2b01      	cmp	r3, #1
 800163e:	d117      	bne.n	8001670 <MODE4+0x80>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001646:	4819      	ldr	r0, [pc, #100]	; (80016ac <MODE4+0xbc>)
 8001648:	f000 ff55 	bl	80024f6 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
		setValues();
 800164c:	f7ff fcf6 	bl	800103c <setValues>
		SCH_Delete_Task(0);
 8001650:	2000      	movs	r0, #0
 8001652:	f000 f9c5 	bl	80019e0 <SCH_Delete_Task>
		SCH_Delete_Task(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f000 f9c2 	bl	80019e0 <SCH_Delete_Task>
		SCH_Add_Task(seg_fsm, 1, 50);
 800165c:	2232      	movs	r2, #50	; 0x32
 800165e:	2101      	movs	r1, #1
 8001660:	4815      	ldr	r0, [pc, #84]	; (80016b8 <MODE4+0xc8>)
 8001662:	f000 f8f9 	bl	8001858 <SCH_Add_Task>
		SCH_Add_Task(RED_GREEN, 1, 100);
 8001666:	2264      	movs	r2, #100	; 0x64
 8001668:	2101      	movs	r1, #1
 800166a:	4814      	ldr	r0, [pc, #80]	; (80016bc <MODE4+0xcc>)
 800166c:	f000 f8f4 	bl	8001858 <SCH_Add_Task>
	}
	if (isButtonPressed(0) == 1){
 8001670:	2000      	movs	r0, #0
 8001672:	f7fe fef1 	bl	8000458 <isButtonPressed>
 8001676:	4603      	mov	r3, r0
 8001678:	2b01      	cmp	r3, #1
 800167a:	d115      	bne.n	80016a8 <MODE4+0xb8>
		HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800167c:	2201      	movs	r2, #1
 800167e:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001682:	480a      	ldr	r0, [pc, #40]	; (80016ac <MODE4+0xbc>)
 8001684:	f000 ff37 	bl	80024f6 <HAL_GPIO_WritePin>
														  |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_SET);
		SCH_Delete_Task(0);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f9a9 	bl	80019e0 <SCH_Delete_Task>
		SCH_Delete_Task(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f000 f9a6 	bl	80019e0 <SCH_Delete_Task>
		SCH_Add_Task(seg_fsm, 1, 50);
 8001694:	2232      	movs	r2, #50	; 0x32
 8001696:	2101      	movs	r1, #1
 8001698:	4807      	ldr	r0, [pc, #28]	; (80016b8 <MODE4+0xc8>)
 800169a:	f000 f8dd 	bl	8001858 <SCH_Add_Task>
		SCH_Add_Task(RED_GREEN, 1, 100);
 800169e:	2264      	movs	r2, #100	; 0x64
 80016a0:	2101      	movs	r1, #1
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MODE4+0xcc>)
 80016a4:	f000 f8d8 	bl	8001858 <SCH_Add_Task>
	}
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40010800 	.word	0x40010800
 80016b0:	20000040 	.word	0x20000040
 80016b4:	20000044 	.word	0x20000044
 80016b8:	08000405 	.word	0x08000405
 80016bc:	0800014d 	.word	0x0800014d

080016c0 <SCH_Init>:
#include "main.h"

int global_time=0;

sTask SCH_tasks_G [SCH_MAX_TASKS];
void SCH_Init(void) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i=0;i<SCH_MAX_TASKS;i++) {
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	e034      	b.n	8001736 <SCH_Init+0x76>
		SCH_tasks_G[i].pTask = 0x0000;
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	491e      	ldr	r1, [pc, #120]	; (8001748 <SCH_Init+0x88>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Delay = 0;
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	4919      	ldr	r1, [pc, #100]	; (8001748 <SCH_Init+0x88>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3304      	adds	r3, #4
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Period = 0;
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	4914      	ldr	r1, [pc, #80]	; (8001748 <SCH_Init+0x88>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3308      	adds	r3, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	490f      	ldr	r1, [pc, #60]	; (8001748 <SCH_Init+0x88>)
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	330c      	adds	r3, #12
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].TaskID = -1;
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	490a      	ldr	r1, [pc, #40]	; (8001748 <SCH_Init+0x88>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3310      	adds	r3, #16
 800172a:	f04f 32ff 	mov.w	r2, #4294967295
 800172e:	601a      	str	r2, [r3, #0]
	for (i=0;i<SCH_MAX_TASKS;i++) {
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	3301      	adds	r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b09      	cmp	r3, #9
 800173a:	d9c7      	bls.n	80016cc <SCH_Init+0xc>
	}
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000194 	.word	0x20000194

0800174c <SCH_Update>:

void SCH_Update(void) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index=0;index<SCH_MAX_TASKS;index++) {
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	e073      	b.n	8001840 <SCH_Update+0xf4>
		 if (SCH_tasks_G[index].pTask && SCH_tasks_G[index].Delay == 0) {
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	493e      	ldr	r1, [pc, #248]	; (8001854 <SCH_Update+0x108>)
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d03e      	beq.n	80017ea <SCH_Update+0x9e>
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	4939      	ldr	r1, [pc, #228]	; (8001854 <SCH_Update+0x108>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3304      	adds	r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d133      	bne.n	80017ea <SCH_Update+0x9e>
			SCH_tasks_G[index].RunMe += 1;
 8001782:	79fa      	ldrb	r2, [r7, #7]
 8001784:	4933      	ldr	r1, [pc, #204]	; (8001854 <SCH_Update+0x108>)
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	330c      	adds	r3, #12
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	3301      	adds	r3, #1
 8001798:	b2d8      	uxtb	r0, r3
 800179a:	492e      	ldr	r1, [pc, #184]	; (8001854 <SCH_Update+0x108>)
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	330c      	adds	r3, #12
 80017a8:	4602      	mov	r2, r0
 80017aa:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[index].Period) {
 80017ac:	79fa      	ldrb	r2, [r7, #7]
 80017ae:	4929      	ldr	r1, [pc, #164]	; (8001854 <SCH_Update+0x108>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	3308      	adds	r3, #8
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d03b      	beq.n	800183a <SCH_Update+0xee>
				SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period-1;
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	4923      	ldr	r1, [pc, #140]	; (8001854 <SCH_Update+0x108>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3308      	adds	r3, #8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	1e59      	subs	r1, r3, #1
 80017d8:	481e      	ldr	r0, [pc, #120]	; (8001854 <SCH_Update+0x108>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4403      	add	r3, r0
 80017e4:	3304      	adds	r3, #4
 80017e6:	6019      	str	r1, [r3, #0]
			if (SCH_tasks_G[index].Period) {
 80017e8:	e027      	b.n	800183a <SCH_Update+0xee>
			}
		} else if (SCH_tasks_G[index].pTask && SCH_tasks_G[index].Delay>0) {
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	4919      	ldr	r1, [pc, #100]	; (8001854 <SCH_Update+0x108>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01d      	beq.n	800183a <SCH_Update+0xee>
 80017fe:	79fa      	ldrb	r2, [r7, #7]
 8001800:	4914      	ldr	r1, [pc, #80]	; (8001854 <SCH_Update+0x108>)
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	3304      	adds	r3, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d012      	beq.n	800183a <SCH_Update+0xee>
			SCH_tasks_G[index].Delay -= 1;
 8001814:	79fa      	ldrb	r2, [r7, #7]
 8001816:	490f      	ldr	r1, [pc, #60]	; (8001854 <SCH_Update+0x108>)
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3304      	adds	r3, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	1e59      	subs	r1, r3, #1
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <SCH_Update+0x108>)
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4403      	add	r3, r0
 8001836:	3304      	adds	r3, #4
 8001838:	6019      	str	r1, [r3, #0]
	for (index=0;index<SCH_MAX_TASKS;index++) {
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	3301      	adds	r3, #1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b09      	cmp	r3, #9
 8001844:	d988      	bls.n	8001758 <SCH_Update+0xc>
		}
	}
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000194 	.word	0x20000194

08001858 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	unsigned char index=0;
 8001864:	2300      	movs	r3, #0
 8001866:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask != 0x0000) && (index < SCH_MAX_TASKS)) {
 8001868:	e002      	b.n	8001870 <SCH_Add_Task+0x18>
		index++;
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	3301      	adds	r3, #1
 800186e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask != 0x0000) && (index < SCH_MAX_TASKS)) {
 8001870:	7dfa      	ldrb	r2, [r7, #23]
 8001872:	4927      	ldr	r1, [pc, #156]	; (8001910 <SCH_Add_Task+0xb8>)
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <SCH_Add_Task+0x32>
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b09      	cmp	r3, #9
 8001888:	d9ef      	bls.n	800186a <SCH_Add_Task+0x12>
	}
	if (index>=SCH_MAX_TASKS) {
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b09      	cmp	r3, #9
 800188e:	d902      	bls.n	8001896 <SCH_Add_Task+0x3e>
		return -1;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	e037      	b.n	8001906 <SCH_Add_Task+0xae>
	}
	SCH_tasks_G [ index ].pTask = pFunction;
 8001896:	7dfa      	ldrb	r2, [r7, #23]
 8001898:	491d      	ldr	r1, [pc, #116]	; (8001910 <SCH_Add_Task+0xb8>)
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].Delay = (DELAY == 0)?0:DELAY-1;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <SCH_Add_Task+0x5c>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1e5a      	subs	r2, r3, #1
 80018b2:	e000      	b.n	80018b6 <SCH_Add_Task+0x5e>
 80018b4:	2200      	movs	r2, #0
 80018b6:	7df9      	ldrb	r1, [r7, #23]
 80018b8:	4815      	ldr	r0, [pc, #84]	; (8001910 <SCH_Add_Task+0xb8>)
 80018ba:	460b      	mov	r3, r1
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4403      	add	r3, r0
 80018c4:	3304      	adds	r3, #4
 80018c6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].Period = PERIOD ;
 80018c8:	7dfa      	ldrb	r2, [r7, #23]
 80018ca:	4911      	ldr	r1, [pc, #68]	; (8001910 <SCH_Add_Task+0xb8>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3308      	adds	r3, #8
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].RunMe = 0 ;
 80018dc:	7dfa      	ldrb	r2, [r7, #23]
 80018de:	490c      	ldr	r1, [pc, #48]	; (8001910 <SCH_Add_Task+0xb8>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	330c      	adds	r3, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G [ index ].TaskID = index;
 80018f0:	7dfa      	ldrb	r2, [r7, #23]
 80018f2:	7df9      	ldrb	r1, [r7, #23]
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <SCH_Add_Task+0xb8>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4403      	add	r3, r0
 8001900:	3310      	adds	r3, #16
 8001902:	6019      	str	r1, [r3, #0]
	return index;
 8001904:	7dfb      	ldrb	r3, [r7, #23]
}
 8001906:	4618      	mov	r0, r3
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	20000194 	.word	0x20000194

08001914 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index=0;index<SCH_MAX_TASKS;index++) {
 800191a:	2300      	movs	r3, #0
 800191c:	71fb      	strb	r3, [r7, #7]
 800191e:	e054      	b.n	80019ca <SCH_Dispatch_Task+0xb6>
		if (SCH_tasks_G[index].RunMe>0) {
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	492e      	ldr	r1, [pc, #184]	; (80019dc <SCH_Dispatch_Task+0xc8>)
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	330c      	adds	r3, #12
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d046      	beq.n	80019c4 <SCH_Dispatch_Task+0xb0>
			(*SCH_tasks_G[index].pTask)();
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	4928      	ldr	r1, [pc, #160]	; (80019dc <SCH_Dispatch_Task+0xc8>)
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4798      	blx	r3
			SCH_tasks_G[index].RunMe -= 1;
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	4924      	ldr	r1, [pc, #144]	; (80019dc <SCH_Dispatch_Task+0xc8>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	330c      	adds	r3, #12
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	3b01      	subs	r3, #1
 800195e:	b2d8      	uxtb	r0, r3
 8001960:	491e      	ldr	r1, [pc, #120]	; (80019dc <SCH_Dispatch_Task+0xc8>)
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	330c      	adds	r3, #12
 800196e:	4602      	mov	r2, r0
 8001970:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[index].Period == 0 && SCH_tasks_G[index].RunMe == 0 && SCH_tasks_G[index].Delay==0) {
 8001972:	79fa      	ldrb	r2, [r7, #7]
 8001974:	4919      	ldr	r1, [pc, #100]	; (80019dc <SCH_Dispatch_Task+0xc8>)
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	3308      	adds	r3, #8
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d119      	bne.n	80019bc <SCH_Dispatch_Task+0xa8>
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	4914      	ldr	r1, [pc, #80]	; (80019dc <SCH_Dispatch_Task+0xc8>)
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	330c      	adds	r3, #12
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10e      	bne.n	80019bc <SCH_Dispatch_Task+0xa8>
 800199e:	79fa      	ldrb	r2, [r7, #7]
 80019a0:	490e      	ldr	r1, [pc, #56]	; (80019dc <SCH_Dispatch_Task+0xc8>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	3304      	adds	r3, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <SCH_Dispatch_Task+0xa8>
				SCH_Delete_Task(index);
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f812 	bl	80019e0 <SCH_Delete_Task>
			}
			timestamp(index);
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f86e 	bl	8001aa0 <timestamp>
	for (index=0;index<SCH_MAX_TASKS;index++) {
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	3301      	adds	r3, #1
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d9a7      	bls.n	8001920 <SCH_Dispatch_Task+0xc>
		}
	}
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000194 	.word	0x20000194

080019e0 <SCH_Delete_Task>:

uint32_t SCH_Delete_Task(uint32_t TASK_INDEX) {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	if (TASK_INDEX < 0 || TASK_INDEX >= SCH_MAX_TASKS) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b09      	cmp	r3, #9
 80019ec:	d902      	bls.n	80019f4 <SCH_Delete_Task+0x14>
		return -1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e03f      	b.n	8001a74 <SCH_Delete_Task+0x94>
	}
	if (SCH_tasks_G[TASK_INDEX].pTask==0x0000) {
 80019f4:	4922      	ldr	r1, [pc, #136]	; (8001a80 <SCH_Delete_Task+0xa0>)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <SCH_Delete_Task+0x2e>
		return -1;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	e032      	b.n	8001a74 <SCH_Delete_Task+0x94>
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001a0e:	491c      	ldr	r1, [pc, #112]	; (8001a80 <SCH_Delete_Task+0xa0>)
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001a20:	4917      	ldr	r1, [pc, #92]	; (8001a80 <SCH_Delete_Task+0xa0>)
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3304      	adds	r3, #4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 8001a34:	4912      	ldr	r1, [pc, #72]	; (8001a80 <SCH_Delete_Task+0xa0>)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3308      	adds	r3, #8
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001a48:	490d      	ldr	r1, [pc, #52]	; (8001a80 <SCH_Delete_Task+0xa0>)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	330c      	adds	r3, #12
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].TaskID = -1;
 8001a5c:	4908      	ldr	r1, [pc, #32]	; (8001a80 <SCH_Delete_Task+0xa0>)
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3310      	adds	r3, #16
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	601a      	str	r2, [r3, #0]
	return TASK_INDEX;
 8001a72:	687b      	ldr	r3, [r7, #4]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000194 	.word	0x20000194

08001a84 <update_time>:

void update_time() {
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
	global_time += 10;
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <update_time+0x18>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	330a      	adds	r3, #10
 8001a8e:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <update_time+0x18>)
 8001a90:	6013      	str	r3, [r2, #0]
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200000e4 	.word	0x200000e4

08001aa0 <timestamp>:

void timestamp(unsigned char index) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	char str[30];
	HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "TaskID: %d", index), 1000);
 8001aaa:	79fa      	ldrb	r2, [r7, #7]
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	4910      	ldr	r1, [pc, #64]	; (8001af4 <timestamp+0x54>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fbb8 	bl	8004228 <siprintf>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	f107 0108 	add.w	r1, r7, #8
 8001ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <timestamp+0x58>)
 8001ac6:	f001 fda9 	bl	800361c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, " timeout at %d\r", global_time), 1000);
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <timestamp+0x5c>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	490b      	ldr	r1, [pc, #44]	; (8001b00 <timestamp+0x60>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fba7 	bl	8004228 <siprintf>
 8001ada:	4603      	mov	r3, r0
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	f107 0108 	add.w	r1, r7, #8
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	4804      	ldr	r0, [pc, #16]	; (8001af8 <timestamp+0x58>)
 8001ae8:	f001 fd98 	bl	800361c <HAL_UART_Transmit>
}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	08004ab4 	.word	0x08004ab4
 8001af8:	2000014c 	.word	0x2000014c
 8001afc:	200000e4 	.word	0x200000e4
 8001b00:	08004ac0 	.word	0x08004ac0

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_MspInit+0x5c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_MspInit+0x60>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <HAL_MspInit+0x60>)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000

08001b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b78:	d113      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_TIM_Base_MspInit+0x44>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_TIM_Base_MspInit+0x44>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_TIM_Base_MspInit+0x44>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	201c      	movs	r0, #28
 8001b98:	f000 fa33 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b9c:	201c      	movs	r0, #28
 8001b9e:	f000 fa4c 	bl	800203a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <HAL_UART_MspInit+0x98>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d137      	bne.n	8001c40 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bda:	61d3      	str	r3, [r2, #28]
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c00:	2304      	movs	r3, #4
 8001c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	480f      	ldr	r0, [pc, #60]	; (8001c50 <HAL_UART_MspInit+0xa0>)
 8001c14:	f000 fade 	bl	80021d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4809      	ldr	r0, [pc, #36]	; (8001c50 <HAL_UART_MspInit+0xa0>)
 8001c2c:	f000 fad2 	bl	80021d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2026      	movs	r0, #38	; 0x26
 8001c36:	f000 f9e4 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c3a:	2026      	movs	r0, #38	; 0x26
 8001c3c:	f000 f9fd 	bl	800203a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010800 	.word	0x40010800

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <NMI_Handler+0x4>

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9a:	f000 f8bf 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <TIM2_IRQHandler+0x10>)
 8001caa:	f001 f91b 	bl	8002ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000104 	.word	0x20000104

08001cb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <USART2_IRQHandler+0x10>)
 8001cbe:	f001 fd31 	bl	8003724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000014c 	.word	0x2000014c

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f002 fa62 	bl	80041c4 <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20002800 	.word	0x20002800
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	200000e8 	.word	0x200000e8
 8001d34:	20000270 	.word	0x20000270

08001d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d44:	f7ff fff8 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d48:	480b      	ldr	r0, [pc, #44]	; (8001d78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d4a:	490c      	ldr	r1, [pc, #48]	; (8001d7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d60:	4c09      	ldr	r4, [pc, #36]	; (8001d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f002 fa2f 	bl	80041d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d72:	f7ff f98d 	bl	8001090 <main>
  bx lr
 8001d76:	4770      	bx	lr
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001d80:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 8001d84:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001d88:	20000270 	.word	0x20000270

08001d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_Init+0x28>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_Init+0x28>)
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f923 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 f808 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff feaa 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f93b 	bl	8002056 <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 f903 	bl	8002002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	2000004c 	.word	0x2000004c
 8001e14:	20000054 	.word	0x20000054
 8001e18:	20000050 	.word	0x20000050

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	20000054 	.word	0x20000054
 8001e3c:	2000025c 	.word	0x2000025c

08001e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	2000025c 	.word	0x2000025c

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4906      	ldr	r1, [pc, #24]	; (8001eec <__NVIC_EnableIRQ+0x34>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb8:	d301      	bcc.n	8001fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <SysTick_Config+0x40>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f7ff ff90 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff2d 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002014:	f7ff ff42 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	6978      	ldr	r0, [r7, #20]
 8002020:	f7ff ff90 	bl	8001f44 <NVIC_EncodePriority>
 8002024:	4602      	mov	r2, r0
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff5f 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff35 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffa2 	bl	8001fa8 <SysTick_Config>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d008      	beq.n	8002098 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e020      	b.n	80020da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 020e 	bic.w	r2, r2, #14
 80020a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f202 	lsl.w	r2, r1, r2
 80020c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d005      	beq.n	8002108 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2204      	movs	r2, #4
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	e051      	b.n	80021ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 020e 	bic.w	r2, r2, #14
 8002116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_DMA_Abort_IT+0xd4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d029      	beq.n	8002186 <HAL_DMA_Abort_IT+0xa2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a21      	ldr	r2, [pc, #132]	; (80021bc <HAL_DMA_Abort_IT+0xd8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_Abort_IT+0x9e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_DMA_Abort_IT+0xdc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01a      	beq.n	800217c <HAL_DMA_Abort_IT+0x98>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_DMA_Abort_IT+0xe0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d012      	beq.n	8002176 <HAL_DMA_Abort_IT+0x92>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_DMA_Abort_IT+0xe4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00a      	beq.n	8002170 <HAL_DMA_Abort_IT+0x8c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <HAL_DMA_Abort_IT+0xe8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d102      	bne.n	800216a <HAL_DMA_Abort_IT+0x86>
 8002164:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002168:	e00e      	b.n	8002188 <HAL_DMA_Abort_IT+0xa4>
 800216a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800216e:	e00b      	b.n	8002188 <HAL_DMA_Abort_IT+0xa4>
 8002170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002174:	e008      	b.n	8002188 <HAL_DMA_Abort_IT+0xa4>
 8002176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217a:	e005      	b.n	8002188 <HAL_DMA_Abort_IT+0xa4>
 800217c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002180:	e002      	b.n	8002188 <HAL_DMA_Abort_IT+0xa4>
 8002182:	2310      	movs	r3, #16
 8002184:	e000      	b.n	8002188 <HAL_DMA_Abort_IT+0xa4>
 8002186:	2301      	movs	r3, #1
 8002188:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_DMA_Abort_IT+0xec>)
 800218a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
    } 
  }
  return status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40020008 	.word	0x40020008
 80021bc:	4002001c 	.word	0x4002001c
 80021c0:	40020030 	.word	0x40020030
 80021c4:	40020044 	.word	0x40020044
 80021c8:	40020058 	.word	0x40020058
 80021cc:	4002006c 	.word	0x4002006c
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b08b      	sub	sp, #44	; 0x2c
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e6:	e148      	b.n	800247a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021e8:	2201      	movs	r2, #1
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	429a      	cmp	r2, r3
 8002202:	f040 8137 	bne.w	8002474 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4aa3      	ldr	r2, [pc, #652]	; (8002498 <HAL_GPIO_Init+0x2c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d05e      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 8002210:	4aa1      	ldr	r2, [pc, #644]	; (8002498 <HAL_GPIO_Init+0x2c4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d875      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 8002216:	4aa1      	ldr	r2, [pc, #644]	; (800249c <HAL_GPIO_Init+0x2c8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d058      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 800221c:	4a9f      	ldr	r2, [pc, #636]	; (800249c <HAL_GPIO_Init+0x2c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d86f      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 8002222:	4a9f      	ldr	r2, [pc, #636]	; (80024a0 <HAL_GPIO_Init+0x2cc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d052      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 8002228:	4a9d      	ldr	r2, [pc, #628]	; (80024a0 <HAL_GPIO_Init+0x2cc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d869      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 800222e:	4a9d      	ldr	r2, [pc, #628]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d04c      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 8002234:	4a9b      	ldr	r2, [pc, #620]	; (80024a4 <HAL_GPIO_Init+0x2d0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d863      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 800223a:	4a9b      	ldr	r2, [pc, #620]	; (80024a8 <HAL_GPIO_Init+0x2d4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d046      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
 8002240:	4a99      	ldr	r2, [pc, #612]	; (80024a8 <HAL_GPIO_Init+0x2d4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d85d      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 8002246:	2b12      	cmp	r3, #18
 8002248:	d82a      	bhi.n	80022a0 <HAL_GPIO_Init+0xcc>
 800224a:	2b12      	cmp	r3, #18
 800224c:	d859      	bhi.n	8002302 <HAL_GPIO_Init+0x12e>
 800224e:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <HAL_GPIO_Init+0x80>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	080022cf 	.word	0x080022cf
 8002258:	080022a9 	.word	0x080022a9
 800225c:	080022bb 	.word	0x080022bb
 8002260:	080022fd 	.word	0x080022fd
 8002264:	08002303 	.word	0x08002303
 8002268:	08002303 	.word	0x08002303
 800226c:	08002303 	.word	0x08002303
 8002270:	08002303 	.word	0x08002303
 8002274:	08002303 	.word	0x08002303
 8002278:	08002303 	.word	0x08002303
 800227c:	08002303 	.word	0x08002303
 8002280:	08002303 	.word	0x08002303
 8002284:	08002303 	.word	0x08002303
 8002288:	08002303 	.word	0x08002303
 800228c:	08002303 	.word	0x08002303
 8002290:	08002303 	.word	0x08002303
 8002294:	08002303 	.word	0x08002303
 8002298:	080022b1 	.word	0x080022b1
 800229c:	080022c5 	.word	0x080022c5
 80022a0:	4a82      	ldr	r2, [pc, #520]	; (80024ac <HAL_GPIO_Init+0x2d8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022a6:	e02c      	b.n	8002302 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e029      	b.n	8002304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	3304      	adds	r3, #4
 80022b6:	623b      	str	r3, [r7, #32]
          break;
 80022b8:	e024      	b.n	8002304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	3308      	adds	r3, #8
 80022c0:	623b      	str	r3, [r7, #32]
          break;
 80022c2:	e01f      	b.n	8002304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	330c      	adds	r3, #12
 80022ca:	623b      	str	r3, [r7, #32]
          break;
 80022cc:	e01a      	b.n	8002304 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022d6:	2304      	movs	r3, #4
 80022d8:	623b      	str	r3, [r7, #32]
          break;
 80022da:	e013      	b.n	8002304 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e4:	2308      	movs	r3, #8
 80022e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	611a      	str	r2, [r3, #16]
          break;
 80022ee:	e009      	b.n	8002304 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f0:	2308      	movs	r3, #8
 80022f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	615a      	str	r2, [r3, #20]
          break;
 80022fa:	e003      	b.n	8002304 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
          break;
 8002300:	e000      	b.n	8002304 <HAL_GPIO_Init+0x130>
          break;
 8002302:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2bff      	cmp	r3, #255	; 0xff
 8002308:	d801      	bhi.n	800230e <HAL_GPIO_Init+0x13a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	e001      	b.n	8002312 <HAL_GPIO_Init+0x13e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2bff      	cmp	r3, #255	; 0xff
 8002318:	d802      	bhi.n	8002320 <HAL_GPIO_Init+0x14c>
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	e002      	b.n	8002326 <HAL_GPIO_Init+0x152>
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	3b08      	subs	r3, #8
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	210f      	movs	r1, #15
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	401a      	ands	r2, r3
 8002338:	6a39      	ldr	r1, [r7, #32]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	431a      	orrs	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8090 	beq.w	8002474 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002354:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <HAL_GPIO_Init+0x2dc>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	4a55      	ldr	r2, [pc, #340]	; (80024b0 <HAL_GPIO_Init+0x2dc>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6193      	str	r3, [r2, #24]
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_GPIO_Init+0x2dc>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800236c:	4a51      	ldr	r2, [pc, #324]	; (80024b4 <HAL_GPIO_Init+0x2e0>)
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002378:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	220f      	movs	r2, #15
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a49      	ldr	r2, [pc, #292]	; (80024b8 <HAL_GPIO_Init+0x2e4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00d      	beq.n	80023b4 <HAL_GPIO_Init+0x1e0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a48      	ldr	r2, [pc, #288]	; (80024bc <HAL_GPIO_Init+0x2e8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d007      	beq.n	80023b0 <HAL_GPIO_Init+0x1dc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <HAL_GPIO_Init+0x2ec>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_GPIO_Init+0x1d8>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e004      	b.n	80023b6 <HAL_GPIO_Init+0x1e2>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e002      	b.n	80023b6 <HAL_GPIO_Init+0x1e2>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_GPIO_Init+0x1e2>
 80023b4:	2300      	movs	r3, #0
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	f002 0203 	and.w	r2, r2, #3
 80023bc:	0092      	lsls	r2, r2, #2
 80023be:	4093      	lsls	r3, r2
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023c6:	493b      	ldr	r1, [pc, #236]	; (80024b4 <HAL_GPIO_Init+0x2e0>)
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023e0:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	4937      	ldr	r1, [pc, #220]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ee:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4933      	ldr	r1, [pc, #204]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002408:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	492d      	ldr	r1, [pc, #180]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	60cb      	str	r3, [r1, #12]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002416:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	4929      	ldr	r1, [pc, #164]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002420:	4013      	ands	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4923      	ldr	r1, [pc, #140]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	43db      	mvns	r3, r3
 8002446:	491f      	ldr	r1, [pc, #124]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002448:	4013      	ands	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4919      	ldr	r1, [pc, #100]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	43db      	mvns	r3, r3
 800246e:	4915      	ldr	r1, [pc, #84]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002470:	4013      	ands	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	3301      	adds	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	f47f aeaf 	bne.w	80021e8 <HAL_GPIO_Init+0x14>
  }
}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	372c      	adds	r7, #44	; 0x2c
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	10320000 	.word	0x10320000
 800249c:	10310000 	.word	0x10310000
 80024a0:	10220000 	.word	0x10220000
 80024a4:	10210000 	.word	0x10210000
 80024a8:	10120000 	.word	0x10120000
 80024ac:	10110000 	.word	0x10110000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	40010800 	.word	0x40010800
 80024bc:	40010c00 	.word	0x40010c00
 80024c0:	40011000 	.word	0x40011000
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e001      	b.n	80024ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	807b      	strh	r3, [r7, #2]
 8002502:	4613      	mov	r3, r2
 8002504:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002506:	787b      	ldrb	r3, [r7, #1]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250c:	887a      	ldrh	r2, [r7, #2]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002512:	e003      	b.n	800251c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	041a      	lsls	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	611a      	str	r2, [r3, #16]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002538:	887a      	ldrh	r2, [r7, #2]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4013      	ands	r3, r2
 800253e:	041a      	lsls	r2, r3, #16
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43d9      	mvns	r1, r3
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	400b      	ands	r3, r1
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	611a      	str	r2, [r3, #16]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_PWR_EnterSLEEPMode+0x34>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_PWR_EnterSLEEPMode+0x34>)
 800256a:	f023 0304 	bic.w	r3, r3, #4
 800256e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002576:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002578:	e002      	b.n	8002580 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800257a:	bf40      	sev
    __WFE();
 800257c:	bf20      	wfe
    __WFE();
 800257e:	bf20      	wfe
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e26c      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8087 	beq.w	80026be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b0:	4b92      	ldr	r3, [pc, #584]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d00c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025bc:	4b8f      	ldr	r3, [pc, #572]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d112      	bne.n	80025ee <HAL_RCC_OscConfig+0x5e>
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d10b      	bne.n	80025ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	4b89      	ldr	r3, [pc, #548]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d06c      	beq.n	80026bc <HAL_RCC_OscConfig+0x12c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d168      	bne.n	80026bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e246      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x76>
 80025f8:	4b80      	ldr	r3, [pc, #512]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a7f      	ldr	r2, [pc, #508]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e02e      	b.n	8002664 <HAL_RCC_OscConfig+0xd4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x98>
 800260e:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b78      	ldr	r3, [pc, #480]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a77      	ldr	r2, [pc, #476]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e01d      	b.n	8002664 <HAL_RCC_OscConfig+0xd4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0xbc>
 8002632:	4b72      	ldr	r3, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a71      	ldr	r2, [pc, #452]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a6e      	ldr	r2, [pc, #440]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0xd4>
 800264c:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a6a      	ldr	r2, [pc, #424]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a67      	ldr	r2, [pc, #412]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7ff fbe8 	bl	8001e40 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7ff fbe4 	bl	8001e40 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e1fa      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0xe4>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff fbd4 	bl	8001e40 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff fbd0 	bl	8001e40 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e1e6      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x10c>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d063      	beq.n	8002792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ca:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026d6:	4b49      	ldr	r3, [pc, #292]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d11c      	bne.n	800271c <HAL_RCC_OscConfig+0x18c>
 80026e2:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d116      	bne.n	800271c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x176>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e1ba      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4939      	ldr	r1, [pc, #228]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	e03a      	b.n	8002792 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <HAL_RCC_OscConfig+0x270>)
 8002726:	2201      	movs	r2, #1
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff fb89 	bl	8001e40 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002732:	f7ff fb85 	bl	8001e40 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e19b      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4927      	ldr	r1, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
 8002764:	e015      	b.n	8002792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_RCC_OscConfig+0x270>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff fb68 	bl	8001e40 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7ff fb64 	bl	8001e40 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e17a      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d03a      	beq.n	8002814 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_RCC_OscConfig+0x274>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7ff fb48 	bl	8001e40 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7ff fb44 	bl	8001e40 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e15a      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_RCC_OscConfig+0x26c>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f000 facc 	bl	8002d70 <RCC_Delay>
 80027d8:	e01c      	b.n	8002814 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_RCC_OscConfig+0x274>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7ff fb2e 	bl	8001e40 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e6:	e00f      	b.n	8002808 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7ff fb2a 	bl	8001e40 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d908      	bls.n	8002808 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e140      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	42420000 	.word	0x42420000
 8002804:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	4b9e      	ldr	r3, [pc, #632]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e9      	bne.n	80027e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a6 	beq.w	800296e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002826:	4b97      	ldr	r3, [pc, #604]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b94      	ldr	r3, [pc, #592]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4a93      	ldr	r2, [pc, #588]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	61d3      	str	r3, [r2, #28]
 800283e:	4b91      	ldr	r3, [pc, #580]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b8e      	ldr	r3, [pc, #568]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d118      	bne.n	800288c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a8a      	ldr	r2, [pc, #552]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7ff faeb 	bl	8001e40 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286e:	f7ff fae7 	bl	8001e40 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b64      	cmp	r3, #100	; 0x64
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0fd      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	4b81      	ldr	r3, [pc, #516]	; (8002a88 <HAL_RCC_OscConfig+0x4f8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x312>
 8002894:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a7a      	ldr	r2, [pc, #488]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	e02d      	b.n	80028fe <HAL_RCC_OscConfig+0x36e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x334>
 80028aa:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a75      	ldr	r2, [pc, #468]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	4b73      	ldr	r3, [pc, #460]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a72      	ldr	r2, [pc, #456]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	e01c      	b.n	80028fe <HAL_RCC_OscConfig+0x36e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d10c      	bne.n	80028e6 <HAL_RCC_OscConfig+0x356>
 80028cc:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a6c      	ldr	r2, [pc, #432]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a69      	ldr	r2, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	e00b      	b.n	80028fe <HAL_RCC_OscConfig+0x36e>
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a66      	ldr	r2, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a63      	ldr	r2, [pc, #396]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d015      	beq.n	8002932 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7ff fa9b 	bl	8001e40 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7ff fa97 	bl	8001e40 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0ab      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	4b57      	ldr	r3, [pc, #348]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ee      	beq.n	800290e <HAL_RCC_OscConfig+0x37e>
 8002930:	e014      	b.n	800295c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7ff fa85 	bl	8001e40 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7ff fa81 	bl	8001e40 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f241 3288 	movw	r2, #5000	; 0x1388
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e095      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ee      	bne.n	800293a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d105      	bne.n	800296e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002962:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4a47      	ldr	r2, [pc, #284]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8081 	beq.w	8002a7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002978:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d061      	beq.n	8002a48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d146      	bne.n	8002a1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCC_OscConfig+0x4fc>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7ff fa55 	bl	8001e40 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299a:	f7ff fa51 	bl	8001e40 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e067      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ac:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c0:	d108      	bne.n	80029d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029c2:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	492d      	ldr	r1, [pc, #180]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a19      	ldr	r1, [r3, #32]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	430b      	orrs	r3, r1
 80029e6:	4927      	ldr	r1, [pc, #156]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x4fc>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7ff fa25 	bl	8001e40 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fa:	f7ff fa21 	bl	8001e40 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e037      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x46a>
 8002a18:	e02f      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_RCC_OscConfig+0x4fc>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff fa0e 	bl	8001e40 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7ff fa0a 	bl	8001e40 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e020      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x498>
 8002a46:	e018      	b.n	8002a7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e013      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	42420060 	.word	0x42420060

08002a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0d0      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d910      	bls.n	8002ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b67      	ldr	r3, [pc, #412]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0207 	bic.w	r2, r3, #7
 8002aba:	4965      	ldr	r1, [pc, #404]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0b8      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002af6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b10:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	494d      	ldr	r1, [pc, #308]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d040      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d115      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e07f      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e073      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06b      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6e:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f023 0203 	bic.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4936      	ldr	r1, [pc, #216]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b80:	f7ff f95e 	bl	8001e40 <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b88:	f7ff f95a 	bl	8001e40 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e053      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	4b2d      	ldr	r3, [pc, #180]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 020c 	and.w	r2, r3, #12
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1eb      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d210      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 0207 	bic.w	r2, r3, #7
 8002bc6:	4922      	ldr	r1, [pc, #136]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e032      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4916      	ldr	r1, [pc, #88]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	490e      	ldr	r1, [pc, #56]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c1e:	f000 f821 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	490a      	ldr	r1, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	5ccb      	ldrb	r3, [r1, r3]
 8002c32:	fa22 f303 	lsr.w	r3, r2, r3
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x1cc>)
 8002c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1d0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f8bc 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40022000 	.word	0x40022000
 8002c54:	40021000 	.word	0x40021000
 8002c58:	08004ad0 	.word	0x08004ad0
 8002c5c:	2000004c 	.word	0x2000004c
 8002c60:	20000050 	.word	0x20000050

08002c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x30>
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x36>
 8002c92:	e027      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c96:	613b      	str	r3, [r7, #16]
      break;
 8002c98:	e027      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0c9b      	lsrs	r3, r3, #18
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d010      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	0c5b      	lsrs	r3, r3, #17
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002cc6:	fb02 f203 	mul.w	r2, r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e004      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cd8:	fb02 f303 	mul.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	613b      	str	r3, [r7, #16]
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce6:	613b      	str	r3, [r7, #16]
      break;
 8002ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cea:	693b      	ldr	r3, [r7, #16]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	007a1200 	.word	0x007a1200
 8002d00:	08004ae8 	.word	0x08004ae8
 8002d04:	08004af8 	.word	0x08004af8
 8002d08:	003d0900 	.word	0x003d0900

08002d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d10:	4b02      	ldr	r3, [pc, #8]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	2000004c 	.word	0x2000004c

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff2 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08004ae0 	.word	0x08004ae0

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffde 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0adb      	lsrs	r3, r3, #11
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08004ae0 	.word	0x08004ae0

08002d70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <RCC_Delay+0x34>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <RCC_Delay+0x38>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0a5b      	lsrs	r3, r3, #9
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d8c:	bf00      	nop
  }
  while (Delay --);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1e5a      	subs	r2, r3, #1
 8002d92:	60fa      	str	r2, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f9      	bne.n	8002d8c <RCC_Delay+0x1c>
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	2000004c 	.word	0x2000004c
 8002da8:	10624dd3 	.word	0x10624dd3

08002dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e041      	b.n	8002e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fec8 	bl	8001b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f000 fa6e 	bl	80032cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d001      	beq.n	8002e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e035      	b.n	8002ed0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a16      	ldr	r2, [pc, #88]	; (8002edc <HAL_TIM_Base_Start_IT+0x90>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_TIM_Base_Start_IT+0x4e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d004      	beq.n	8002e9a <HAL_TIM_Base_Start_IT+0x4e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <HAL_TIM_Base_Start_IT+0x94>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d111      	bne.n	8002ebe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d010      	beq.n	8002ece <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebc:	e007      	b.n	8002ece <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40000400 	.word	0x40000400

08002ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d122      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d11b      	bne.n	8002f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0202 	mvn.w	r2, #2
 8002f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f9b4 	bl	8003294 <HAL_TIM_IC_CaptureCallback>
 8002f2c:	e005      	b.n	8002f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9a7 	bl	8003282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f9b6 	bl	80032a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d122      	bne.n	8002f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d11b      	bne.n	8002f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0204 	mvn.w	r2, #4
 8002f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f98a 	bl	8003294 <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f97d 	bl	8003282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f98c 	bl	80032a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0208 	mvn.w	r2, #8
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f960 	bl	8003294 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f953 	bl	8003282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f962 	bl	80032a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b10      	cmp	r3, #16
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0210 	mvn.w	r2, #16
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2208      	movs	r2, #8
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f936 	bl	8003294 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f929 	bl	8003282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f938 	bl	80032a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d10e      	bne.n	8003068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0201 	mvn.w	r2, #1
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe f972 	bl	800134c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b80      	cmp	r3, #128	; 0x80
 8003074:	d10e      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d107      	bne.n	8003094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fa6b 	bl	800356a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8fc 	bl	80032b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d107      	bne.n	80030ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0220 	mvn.w	r2, #32
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa36 	bl	8003558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_TIM_ConfigClockSource+0x1c>
 800310c:	2302      	movs	r3, #2
 800310e:	e0b4      	b.n	800327a <HAL_TIM_ConfigClockSource+0x186>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800312e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003148:	d03e      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0xd4>
 800314a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314e:	f200 8087 	bhi.w	8003260 <HAL_TIM_ConfigClockSource+0x16c>
 8003152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003156:	f000 8086 	beq.w	8003266 <HAL_TIM_ConfigClockSource+0x172>
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315e:	d87f      	bhi.n	8003260 <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	2b70      	cmp	r3, #112	; 0x70
 8003162:	d01a      	beq.n	800319a <HAL_TIM_ConfigClockSource+0xa6>
 8003164:	2b70      	cmp	r3, #112	; 0x70
 8003166:	d87b      	bhi.n	8003260 <HAL_TIM_ConfigClockSource+0x16c>
 8003168:	2b60      	cmp	r3, #96	; 0x60
 800316a:	d050      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x11a>
 800316c:	2b60      	cmp	r3, #96	; 0x60
 800316e:	d877      	bhi.n	8003260 <HAL_TIM_ConfigClockSource+0x16c>
 8003170:	2b50      	cmp	r3, #80	; 0x50
 8003172:	d03c      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0xfa>
 8003174:	2b50      	cmp	r3, #80	; 0x50
 8003176:	d873      	bhi.n	8003260 <HAL_TIM_ConfigClockSource+0x16c>
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d058      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x13a>
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d86f      	bhi.n	8003260 <HAL_TIM_ConfigClockSource+0x16c>
 8003180:	2b30      	cmp	r3, #48	; 0x30
 8003182:	d064      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x15a>
 8003184:	2b30      	cmp	r3, #48	; 0x30
 8003186:	d86b      	bhi.n	8003260 <HAL_TIM_ConfigClockSource+0x16c>
 8003188:	2b20      	cmp	r3, #32
 800318a:	d060      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x15a>
 800318c:	2b20      	cmp	r3, #32
 800318e:	d867      	bhi.n	8003260 <HAL_TIM_ConfigClockSource+0x16c>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d05c      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x15a>
 8003194:	2b10      	cmp	r3, #16
 8003196:	d05a      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x15a>
 8003198:	e062      	b.n	8003260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f000 f95e 	bl	800346a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	609a      	str	r2, [r3, #8]
      break;
 80031c6:	e04f      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f000 f947 	bl	800346a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ea:	609a      	str	r2, [r3, #8]
      break;
 80031ec:	e03c      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f000 f8be 	bl	800337c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2150      	movs	r1, #80	; 0x50
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f915 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 800320c:	e02c      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6859      	ldr	r1, [r3, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	461a      	mov	r2, r3
 800321c:	f000 f8dc 	bl	80033d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2160      	movs	r1, #96	; 0x60
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f905 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 800322c:	e01c      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	461a      	mov	r2, r3
 800323c:	f000 f89e 	bl	800337c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2140      	movs	r1, #64	; 0x40
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f8f5 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 800324c:	e00c      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f000 f8ec 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 800325e:	e003      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      break;
 8003264:	e000      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
	...

080032cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a25      	ldr	r2, [pc, #148]	; (8003374 <TIM_Base_SetConfig+0xa8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_Base_SetConfig+0x28>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d003      	beq.n	80032f4 <TIM_Base_SetConfig+0x28>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a22      	ldr	r2, [pc, #136]	; (8003378 <TIM_Base_SetConfig+0xac>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d108      	bne.n	8003306 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <TIM_Base_SetConfig+0xa8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0x52>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0x52>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a17      	ldr	r2, [pc, #92]	; (8003378 <TIM_Base_SetConfig+0xac>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a07      	ldr	r2, [pc, #28]	; (8003374 <TIM_Base_SetConfig+0xa8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	615a      	str	r2, [r3, #20]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400

0800337c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f023 0201 	bic.w	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 030a 	bic.w	r3, r3, #10
 80033b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0210 	bic.w	r2, r3, #16
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	031b      	lsls	r3, r3, #12
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003414:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	f043 0307 	orr.w	r3, r3, #7
 8003458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800346a:	b480      	push	{r7}
 800346c:	b087      	sub	sp, #28
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003484:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	021a      	lsls	r2, r3, #8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	431a      	orrs	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	609a      	str	r2, [r3, #8]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034bc:	2302      	movs	r3, #2
 80034be:	e041      	b.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a14      	ldr	r2, [pc, #80]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350c:	d004      	beq.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10c      	bne.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	4313      	orrs	r3, r2
 8003528:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40000400 	.word	0x40000400

08003558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e042      	b.n	8003614 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fe fb04 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fd71 	bl	80040a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b20      	cmp	r3, #32
 800363a:	d16d      	bne.n	8003718 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_UART_Transmit+0x2c>
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e066      	b.n	800371a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2221      	movs	r2, #33	; 0x21
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800365a:	f7fe fbf1 	bl	8001e40 <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003674:	d108      	bne.n	8003688 <HAL_UART_Transmit+0x6c>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d104      	bne.n	8003688 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	e003      	b.n	8003690 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003690:	e02a      	b.n	80036e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	2180      	movs	r1, #128	; 0x80
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 faf9 	bl	8003c94 <UART_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e036      	b.n	800371a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10b      	bne.n	80036ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	3302      	adds	r3, #2
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	e007      	b.n	80036da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	3301      	adds	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1cf      	bne.n	8003692 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2200      	movs	r2, #0
 80036fa:	2140      	movs	r1, #64	; 0x40
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fac9 	bl	8003c94 <UART_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e006      	b.n	800371a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b0ba      	sub	sp, #232	; 0xe8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800374a:	2300      	movs	r3, #0
 800374c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_UART_IRQHandler+0x66>
 8003776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fbd1 	bl	8003f2a <UART_Receive_IT>
      return;
 8003788:	e25b      	b.n	8003c42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800378a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80de 	beq.w	8003950 <HAL_UART_IRQHandler+0x22c>
 8003794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80d1 	beq.w	8003950 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_UART_IRQHandler+0xae>
 80037ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <HAL_UART_IRQHandler+0xd2>
 80037de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f043 0202 	orr.w	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_UART_IRQHandler+0xf6>
 8003802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f043 0204 	orr.w	r2, r3, #4
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d011      	beq.n	800384a <HAL_UART_IRQHandler+0x126>
 8003826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d105      	bne.n	800383e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f043 0208 	orr.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 81f2 	beq.w	8003c38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_UART_IRQHandler+0x14e>
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fb5c 	bl	8003f2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf14      	ite	ne
 8003880:	2301      	movne	r3, #1
 8003882:	2300      	moveq	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <HAL_UART_IRQHandler+0x17a>
 8003896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d04f      	beq.n	800393e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa66 	bl	8003d70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d041      	beq.n	8003936 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3314      	adds	r3, #20
 80038da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1d9      	bne.n	80038b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d013      	beq.n	800392e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	4a7e      	ldr	r2, [pc, #504]	; (8003b04 <HAL_UART_IRQHandler+0x3e0>)
 800390c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fbe6 	bl	80020e4 <HAL_DMA_Abort_IT>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003928:	4610      	mov	r0, r2
 800392a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e00e      	b.n	800394c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f99c 	bl	8003c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	e00a      	b.n	800394c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f998 	bl	8003c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	e006      	b.n	800394c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f994 	bl	8003c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800394a:	e175      	b.n	8003c38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394c:	bf00      	nop
    return;
 800394e:	e173      	b.n	8003c38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b01      	cmp	r3, #1
 8003956:	f040 814f 	bne.w	8003bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8148 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8141 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80b6 	beq.w	8003b08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8145 	beq.w	8003c3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039ba:	429a      	cmp	r2, r3
 80039bc:	f080 813e 	bcs.w	8003c3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	f000 8088 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	330c      	adds	r3, #12
 80039da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1d9      	bne.n	80039d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3314      	adds	r3, #20
 8003a26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3314      	adds	r3, #20
 8003a40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e1      	bne.n	8003a20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3314      	adds	r3, #20
 8003a62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e3      	bne.n	8003a5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	f023 0310 	bic.w	r3, r3, #16
 8003ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ac6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ac8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e3      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fac5 	bl	800206e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8bf 	bl	8003c7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b00:	e09c      	b.n	8003c3c <HAL_UART_IRQHandler+0x518>
 8003b02:	bf00      	nop
 8003b04:	08003e35 	.word	0x08003e35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 808e 	beq.w	8003c40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8089 	beq.w	8003c40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b52:	647a      	str	r2, [r7, #68]	; 0x44
 8003b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e3      	bne.n	8003b2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3314      	adds	r3, #20
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	623b      	str	r3, [r7, #32]
   return(result);
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3314      	adds	r3, #20
 8003b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b8a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e3      	bne.n	8003b66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	e853 3f00 	ldrex	r3, [r3]
 8003bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0310 	bic.w	r3, r3, #16
 8003bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003bd0:	61fa      	str	r2, [r7, #28]
 8003bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e3      	bne.n	8003bac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f844 	bl	8003c7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf6:	e023      	b.n	8003c40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <HAL_UART_IRQHandler+0x4f4>
 8003c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f923 	bl	8003e5c <UART_Transmit_IT>
    return;
 8003c16:	e014      	b.n	8003c42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <HAL_UART_IRQHandler+0x51e>
 8003c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f962 	bl	8003efa <UART_EndTransmit_IT>
    return;
 8003c36:	e004      	b.n	8003c42 <HAL_UART_IRQHandler+0x51e>
    return;
 8003c38:	bf00      	nop
 8003c3a:	e002      	b.n	8003c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c3c:	bf00      	nop
 8003c3e:	e000      	b.n	8003c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c40:	bf00      	nop
  }
}
 8003c42:	37e8      	adds	r7, #232	; 0xe8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b090      	sub	sp, #64	; 0x40
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca4:	e050      	b.n	8003d48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d04c      	beq.n	8003d48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb4:	f7fe f8c4 	bl	8001e40 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d241      	bcs.n	8003d48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ce4:	637a      	str	r2, [r7, #52]	; 0x34
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e5      	bne.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	613b      	str	r3, [r7, #16]
   return(result);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d18:	623a      	str	r2, [r7, #32]
 8003d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	69f9      	ldr	r1, [r7, #28]
 8003d1e:	6a3a      	ldr	r2, [r7, #32]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e00f      	b.n	8003d68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4013      	ands	r3, r2
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d09f      	beq.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3740      	adds	r7, #64	; 0x40
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b095      	sub	sp, #84	; 0x54
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d98:	643a      	str	r2, [r7, #64]	; 0x40
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e5      	bne.n	8003d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3314      	adds	r3, #20
 8003db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3314      	adds	r3, #20
 8003dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e5      	bne.n	8003dac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d119      	bne.n	8003e1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e08:	61ba      	str	r2, [r7, #24]
 8003e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6979      	ldr	r1, [r7, #20]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	613b      	str	r3, [r7, #16]
   return(result);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e2a:	bf00      	nop
 8003e2c:	3754      	adds	r7, #84	; 0x54
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff ff0c 	bl	8003c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b21      	cmp	r3, #33	; 0x21
 8003e6e:	d13e      	bne.n	8003eee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e78:	d114      	bne.n	8003ea4 <UART_Transmit_IT+0x48>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d110      	bne.n	8003ea4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]
 8003ea2:	e008      	b.n	8003eb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	1c59      	adds	r1, r3, #1
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6211      	str	r1, [r2, #32]
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
  }
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fe94 	bl	8003c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b08c      	sub	sp, #48	; 0x30
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b22      	cmp	r3, #34	; 0x22
 8003f3c:	f040 80ae 	bne.w	800409c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d117      	bne.n	8003f7a <UART_Receive_IT+0x50>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d113      	bne.n	8003f7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	1c9a      	adds	r2, r3, #2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
 8003f78:	e026      	b.n	8003fc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d007      	beq.n	8003f9e <UART_Receive_IT+0x74>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <UART_Receive_IT+0x82>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e008      	b.n	8003fbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d15d      	bne.n	8004098 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0220 	bic.w	r2, r2, #32
 8003fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	2b01      	cmp	r3, #1
 8004020:	d135      	bne.n	800408e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	613b      	str	r3, [r7, #16]
   return(result);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f023 0310 	bic.w	r3, r3, #16
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004048:	623a      	str	r2, [r7, #32]
 800404a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	6a3a      	ldr	r2, [r7, #32]
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	61bb      	str	r3, [r7, #24]
   return(result);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e5      	bne.n	8004028 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b10      	cmp	r3, #16
 8004068:	d10a      	bne.n	8004080 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fdf9 	bl	8003c7e <HAL_UARTEx_RxEventCallback>
 800408c:	e002      	b.n	8004094 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fde3 	bl	8003c5a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e002      	b.n	800409e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3730      	adds	r7, #48	; 0x30
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040e2:	f023 030c 	bic.w	r3, r3, #12
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	68b9      	ldr	r1, [r7, #8]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2c      	ldr	r2, [pc, #176]	; (80041bc <UART_SetConfig+0x114>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d103      	bne.n	8004118 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004110:	f7fe fe1a 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	e002      	b.n	800411e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7fe fe02 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 800411c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009a      	lsls	r2, r3, #2
 8004128:	441a      	add	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <UART_SetConfig+0x118>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	0119      	lsls	r1, r3, #4
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009a      	lsls	r2, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	fbb2 f2f3 	udiv	r2, r2, r3
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <UART_SetConfig+0x118>)
 8004156:	fba3 0302 	umull	r0, r3, r3, r2
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2064      	movs	r0, #100	; 0x64
 800415e:	fb00 f303 	mul.w	r3, r0, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	3332      	adds	r3, #50	; 0x32
 8004168:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <UART_SetConfig+0x118>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004174:	4419      	add	r1, r3
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009a      	lsls	r2, r3, #2
 8004180:	441a      	add	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	fbb2 f2f3 	udiv	r2, r2, r3
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <UART_SetConfig+0x118>)
 800418e:	fba3 0302 	umull	r0, r3, r3, r2
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2064      	movs	r0, #100	; 0x64
 8004196:	fb00 f303 	mul.w	r3, r0, r3
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	3332      	adds	r3, #50	; 0x32
 80041a0:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <UART_SetConfig+0x118>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	440a      	add	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40013800 	.word	0x40013800
 80041c0:	51eb851f 	.word	0x51eb851f

080041c4 <__errno>:
 80041c4:	4b01      	ldr	r3, [pc, #4]	; (80041cc <__errno+0x8>)
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000058 	.word	0x20000058

080041d0 <__libc_init_array>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	2600      	movs	r6, #0
 80041d4:	4d0c      	ldr	r5, [pc, #48]	; (8004208 <__libc_init_array+0x38>)
 80041d6:	4c0d      	ldr	r4, [pc, #52]	; (800420c <__libc_init_array+0x3c>)
 80041d8:	1b64      	subs	r4, r4, r5
 80041da:	10a4      	asrs	r4, r4, #2
 80041dc:	42a6      	cmp	r6, r4
 80041de:	d109      	bne.n	80041f4 <__libc_init_array+0x24>
 80041e0:	f000 fc5c 	bl	8004a9c <_init>
 80041e4:	2600      	movs	r6, #0
 80041e6:	4d0a      	ldr	r5, [pc, #40]	; (8004210 <__libc_init_array+0x40>)
 80041e8:	4c0a      	ldr	r4, [pc, #40]	; (8004214 <__libc_init_array+0x44>)
 80041ea:	1b64      	subs	r4, r4, r5
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	42a6      	cmp	r6, r4
 80041f0:	d105      	bne.n	80041fe <__libc_init_array+0x2e>
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f8:	4798      	blx	r3
 80041fa:	3601      	adds	r6, #1
 80041fc:	e7ee      	b.n	80041dc <__libc_init_array+0xc>
 80041fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004202:	4798      	blx	r3
 8004204:	3601      	adds	r6, #1
 8004206:	e7f2      	b.n	80041ee <__libc_init_array+0x1e>
 8004208:	08004b30 	.word	0x08004b30
 800420c:	08004b30 	.word	0x08004b30
 8004210:	08004b30 	.word	0x08004b30
 8004214:	08004b34 	.word	0x08004b34

08004218 <memset>:
 8004218:	4603      	mov	r3, r0
 800421a:	4402      	add	r2, r0
 800421c:	4293      	cmp	r3, r2
 800421e:	d100      	bne.n	8004222 <memset+0xa>
 8004220:	4770      	bx	lr
 8004222:	f803 1b01 	strb.w	r1, [r3], #1
 8004226:	e7f9      	b.n	800421c <memset+0x4>

08004228 <siprintf>:
 8004228:	b40e      	push	{r1, r2, r3}
 800422a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800422e:	b500      	push	{lr}
 8004230:	b09c      	sub	sp, #112	; 0x70
 8004232:	ab1d      	add	r3, sp, #116	; 0x74
 8004234:	9002      	str	r0, [sp, #8]
 8004236:	9006      	str	r0, [sp, #24]
 8004238:	9107      	str	r1, [sp, #28]
 800423a:	9104      	str	r1, [sp, #16]
 800423c:	4808      	ldr	r0, [pc, #32]	; (8004260 <siprintf+0x38>)
 800423e:	4909      	ldr	r1, [pc, #36]	; (8004264 <siprintf+0x3c>)
 8004240:	f853 2b04 	ldr.w	r2, [r3], #4
 8004244:	9105      	str	r1, [sp, #20]
 8004246:	6800      	ldr	r0, [r0, #0]
 8004248:	a902      	add	r1, sp, #8
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	f000 f868 	bl	8004320 <_svfiprintf_r>
 8004250:	2200      	movs	r2, #0
 8004252:	9b02      	ldr	r3, [sp, #8]
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	b01c      	add	sp, #112	; 0x70
 8004258:	f85d eb04 	ldr.w	lr, [sp], #4
 800425c:	b003      	add	sp, #12
 800425e:	4770      	bx	lr
 8004260:	20000058 	.word	0x20000058
 8004264:	ffff0208 	.word	0xffff0208

08004268 <__ssputs_r>:
 8004268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	688e      	ldr	r6, [r1, #8]
 800426e:	4682      	mov	sl, r0
 8004270:	429e      	cmp	r6, r3
 8004272:	460c      	mov	r4, r1
 8004274:	4690      	mov	r8, r2
 8004276:	461f      	mov	r7, r3
 8004278:	d838      	bhi.n	80042ec <__ssputs_r+0x84>
 800427a:	898a      	ldrh	r2, [r1, #12]
 800427c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004280:	d032      	beq.n	80042e8 <__ssputs_r+0x80>
 8004282:	6825      	ldr	r5, [r4, #0]
 8004284:	6909      	ldr	r1, [r1, #16]
 8004286:	3301      	adds	r3, #1
 8004288:	eba5 0901 	sub.w	r9, r5, r1
 800428c:	6965      	ldr	r5, [r4, #20]
 800428e:	444b      	add	r3, r9
 8004290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004298:	106d      	asrs	r5, r5, #1
 800429a:	429d      	cmp	r5, r3
 800429c:	bf38      	it	cc
 800429e:	461d      	movcc	r5, r3
 80042a0:	0553      	lsls	r3, r2, #21
 80042a2:	d531      	bpl.n	8004308 <__ssputs_r+0xa0>
 80042a4:	4629      	mov	r1, r5
 80042a6:	f000 fb53 	bl	8004950 <_malloc_r>
 80042aa:	4606      	mov	r6, r0
 80042ac:	b950      	cbnz	r0, 80042c4 <__ssputs_r+0x5c>
 80042ae:	230c      	movs	r3, #12
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	f8ca 3000 	str.w	r3, [sl]
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042be:	81a3      	strh	r3, [r4, #12]
 80042c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c4:	464a      	mov	r2, r9
 80042c6:	6921      	ldr	r1, [r4, #16]
 80042c8:	f000 face 	bl	8004868 <memcpy>
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	6126      	str	r6, [r4, #16]
 80042da:	444e      	add	r6, r9
 80042dc:	6026      	str	r6, [r4, #0]
 80042de:	463e      	mov	r6, r7
 80042e0:	6165      	str	r5, [r4, #20]
 80042e2:	eba5 0509 	sub.w	r5, r5, r9
 80042e6:	60a5      	str	r5, [r4, #8]
 80042e8:	42be      	cmp	r6, r7
 80042ea:	d900      	bls.n	80042ee <__ssputs_r+0x86>
 80042ec:	463e      	mov	r6, r7
 80042ee:	4632      	mov	r2, r6
 80042f0:	4641      	mov	r1, r8
 80042f2:	6820      	ldr	r0, [r4, #0]
 80042f4:	f000 fac6 	bl	8004884 <memmove>
 80042f8:	68a3      	ldr	r3, [r4, #8]
 80042fa:	6822      	ldr	r2, [r4, #0]
 80042fc:	1b9b      	subs	r3, r3, r6
 80042fe:	4432      	add	r2, r6
 8004300:	2000      	movs	r0, #0
 8004302:	60a3      	str	r3, [r4, #8]
 8004304:	6022      	str	r2, [r4, #0]
 8004306:	e7db      	b.n	80042c0 <__ssputs_r+0x58>
 8004308:	462a      	mov	r2, r5
 800430a:	f000 fb7b 	bl	8004a04 <_realloc_r>
 800430e:	4606      	mov	r6, r0
 8004310:	2800      	cmp	r0, #0
 8004312:	d1e1      	bne.n	80042d8 <__ssputs_r+0x70>
 8004314:	4650      	mov	r0, sl
 8004316:	6921      	ldr	r1, [r4, #16]
 8004318:	f000 face 	bl	80048b8 <_free_r>
 800431c:	e7c7      	b.n	80042ae <__ssputs_r+0x46>
	...

08004320 <_svfiprintf_r>:
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	4698      	mov	r8, r3
 8004326:	898b      	ldrh	r3, [r1, #12]
 8004328:	4607      	mov	r7, r0
 800432a:	061b      	lsls	r3, r3, #24
 800432c:	460d      	mov	r5, r1
 800432e:	4614      	mov	r4, r2
 8004330:	b09d      	sub	sp, #116	; 0x74
 8004332:	d50e      	bpl.n	8004352 <_svfiprintf_r+0x32>
 8004334:	690b      	ldr	r3, [r1, #16]
 8004336:	b963      	cbnz	r3, 8004352 <_svfiprintf_r+0x32>
 8004338:	2140      	movs	r1, #64	; 0x40
 800433a:	f000 fb09 	bl	8004950 <_malloc_r>
 800433e:	6028      	str	r0, [r5, #0]
 8004340:	6128      	str	r0, [r5, #16]
 8004342:	b920      	cbnz	r0, 800434e <_svfiprintf_r+0x2e>
 8004344:	230c      	movs	r3, #12
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	e0d1      	b.n	80044f2 <_svfiprintf_r+0x1d2>
 800434e:	2340      	movs	r3, #64	; 0x40
 8004350:	616b      	str	r3, [r5, #20]
 8004352:	2300      	movs	r3, #0
 8004354:	9309      	str	r3, [sp, #36]	; 0x24
 8004356:	2320      	movs	r3, #32
 8004358:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800435c:	2330      	movs	r3, #48	; 0x30
 800435e:	f04f 0901 	mov.w	r9, #1
 8004362:	f8cd 800c 	str.w	r8, [sp, #12]
 8004366:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800450c <_svfiprintf_r+0x1ec>
 800436a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800436e:	4623      	mov	r3, r4
 8004370:	469a      	mov	sl, r3
 8004372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004376:	b10a      	cbz	r2, 800437c <_svfiprintf_r+0x5c>
 8004378:	2a25      	cmp	r2, #37	; 0x25
 800437a:	d1f9      	bne.n	8004370 <_svfiprintf_r+0x50>
 800437c:	ebba 0b04 	subs.w	fp, sl, r4
 8004380:	d00b      	beq.n	800439a <_svfiprintf_r+0x7a>
 8004382:	465b      	mov	r3, fp
 8004384:	4622      	mov	r2, r4
 8004386:	4629      	mov	r1, r5
 8004388:	4638      	mov	r0, r7
 800438a:	f7ff ff6d 	bl	8004268 <__ssputs_r>
 800438e:	3001      	adds	r0, #1
 8004390:	f000 80aa 	beq.w	80044e8 <_svfiprintf_r+0x1c8>
 8004394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004396:	445a      	add	r2, fp
 8004398:	9209      	str	r2, [sp, #36]	; 0x24
 800439a:	f89a 3000 	ldrb.w	r3, [sl]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80a2 	beq.w	80044e8 <_svfiprintf_r+0x1c8>
 80043a4:	2300      	movs	r3, #0
 80043a6:	f04f 32ff 	mov.w	r2, #4294967295
 80043aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ae:	f10a 0a01 	add.w	sl, sl, #1
 80043b2:	9304      	str	r3, [sp, #16]
 80043b4:	9307      	str	r3, [sp, #28]
 80043b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ba:	931a      	str	r3, [sp, #104]	; 0x68
 80043bc:	4654      	mov	r4, sl
 80043be:	2205      	movs	r2, #5
 80043c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c4:	4851      	ldr	r0, [pc, #324]	; (800450c <_svfiprintf_r+0x1ec>)
 80043c6:	f000 fa41 	bl	800484c <memchr>
 80043ca:	9a04      	ldr	r2, [sp, #16]
 80043cc:	b9d8      	cbnz	r0, 8004406 <_svfiprintf_r+0xe6>
 80043ce:	06d0      	lsls	r0, r2, #27
 80043d0:	bf44      	itt	mi
 80043d2:	2320      	movmi	r3, #32
 80043d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043d8:	0711      	lsls	r1, r2, #28
 80043da:	bf44      	itt	mi
 80043dc:	232b      	movmi	r3, #43	; 0x2b
 80043de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043e2:	f89a 3000 	ldrb.w	r3, [sl]
 80043e6:	2b2a      	cmp	r3, #42	; 0x2a
 80043e8:	d015      	beq.n	8004416 <_svfiprintf_r+0xf6>
 80043ea:	4654      	mov	r4, sl
 80043ec:	2000      	movs	r0, #0
 80043ee:	f04f 0c0a 	mov.w	ip, #10
 80043f2:	9a07      	ldr	r2, [sp, #28]
 80043f4:	4621      	mov	r1, r4
 80043f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043fa:	3b30      	subs	r3, #48	; 0x30
 80043fc:	2b09      	cmp	r3, #9
 80043fe:	d94e      	bls.n	800449e <_svfiprintf_r+0x17e>
 8004400:	b1b0      	cbz	r0, 8004430 <_svfiprintf_r+0x110>
 8004402:	9207      	str	r2, [sp, #28]
 8004404:	e014      	b.n	8004430 <_svfiprintf_r+0x110>
 8004406:	eba0 0308 	sub.w	r3, r0, r8
 800440a:	fa09 f303 	lsl.w	r3, r9, r3
 800440e:	4313      	orrs	r3, r2
 8004410:	46a2      	mov	sl, r4
 8004412:	9304      	str	r3, [sp, #16]
 8004414:	e7d2      	b.n	80043bc <_svfiprintf_r+0x9c>
 8004416:	9b03      	ldr	r3, [sp, #12]
 8004418:	1d19      	adds	r1, r3, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	9103      	str	r1, [sp, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	bfbb      	ittet	lt
 8004422:	425b      	neglt	r3, r3
 8004424:	f042 0202 	orrlt.w	r2, r2, #2
 8004428:	9307      	strge	r3, [sp, #28]
 800442a:	9307      	strlt	r3, [sp, #28]
 800442c:	bfb8      	it	lt
 800442e:	9204      	strlt	r2, [sp, #16]
 8004430:	7823      	ldrb	r3, [r4, #0]
 8004432:	2b2e      	cmp	r3, #46	; 0x2e
 8004434:	d10c      	bne.n	8004450 <_svfiprintf_r+0x130>
 8004436:	7863      	ldrb	r3, [r4, #1]
 8004438:	2b2a      	cmp	r3, #42	; 0x2a
 800443a:	d135      	bne.n	80044a8 <_svfiprintf_r+0x188>
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	3402      	adds	r4, #2
 8004440:	1d1a      	adds	r2, r3, #4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	9203      	str	r2, [sp, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	bfb8      	it	lt
 800444a:	f04f 33ff 	movlt.w	r3, #4294967295
 800444e:	9305      	str	r3, [sp, #20]
 8004450:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800451c <_svfiprintf_r+0x1fc>
 8004454:	2203      	movs	r2, #3
 8004456:	4650      	mov	r0, sl
 8004458:	7821      	ldrb	r1, [r4, #0]
 800445a:	f000 f9f7 	bl	800484c <memchr>
 800445e:	b140      	cbz	r0, 8004472 <_svfiprintf_r+0x152>
 8004460:	2340      	movs	r3, #64	; 0x40
 8004462:	eba0 000a 	sub.w	r0, r0, sl
 8004466:	fa03 f000 	lsl.w	r0, r3, r0
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	3401      	adds	r4, #1
 800446e:	4303      	orrs	r3, r0
 8004470:	9304      	str	r3, [sp, #16]
 8004472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004476:	2206      	movs	r2, #6
 8004478:	4825      	ldr	r0, [pc, #148]	; (8004510 <_svfiprintf_r+0x1f0>)
 800447a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800447e:	f000 f9e5 	bl	800484c <memchr>
 8004482:	2800      	cmp	r0, #0
 8004484:	d038      	beq.n	80044f8 <_svfiprintf_r+0x1d8>
 8004486:	4b23      	ldr	r3, [pc, #140]	; (8004514 <_svfiprintf_r+0x1f4>)
 8004488:	bb1b      	cbnz	r3, 80044d2 <_svfiprintf_r+0x1b2>
 800448a:	9b03      	ldr	r3, [sp, #12]
 800448c:	3307      	adds	r3, #7
 800448e:	f023 0307 	bic.w	r3, r3, #7
 8004492:	3308      	adds	r3, #8
 8004494:	9303      	str	r3, [sp, #12]
 8004496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004498:	4433      	add	r3, r6
 800449a:	9309      	str	r3, [sp, #36]	; 0x24
 800449c:	e767      	b.n	800436e <_svfiprintf_r+0x4e>
 800449e:	460c      	mov	r4, r1
 80044a0:	2001      	movs	r0, #1
 80044a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80044a6:	e7a5      	b.n	80043f4 <_svfiprintf_r+0xd4>
 80044a8:	2300      	movs	r3, #0
 80044aa:	f04f 0c0a 	mov.w	ip, #10
 80044ae:	4619      	mov	r1, r3
 80044b0:	3401      	adds	r4, #1
 80044b2:	9305      	str	r3, [sp, #20]
 80044b4:	4620      	mov	r0, r4
 80044b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ba:	3a30      	subs	r2, #48	; 0x30
 80044bc:	2a09      	cmp	r2, #9
 80044be:	d903      	bls.n	80044c8 <_svfiprintf_r+0x1a8>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0c5      	beq.n	8004450 <_svfiprintf_r+0x130>
 80044c4:	9105      	str	r1, [sp, #20]
 80044c6:	e7c3      	b.n	8004450 <_svfiprintf_r+0x130>
 80044c8:	4604      	mov	r4, r0
 80044ca:	2301      	movs	r3, #1
 80044cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80044d0:	e7f0      	b.n	80044b4 <_svfiprintf_r+0x194>
 80044d2:	ab03      	add	r3, sp, #12
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	462a      	mov	r2, r5
 80044d8:	4638      	mov	r0, r7
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <_svfiprintf_r+0x1f8>)
 80044dc:	a904      	add	r1, sp, #16
 80044de:	f3af 8000 	nop.w
 80044e2:	1c42      	adds	r2, r0, #1
 80044e4:	4606      	mov	r6, r0
 80044e6:	d1d6      	bne.n	8004496 <_svfiprintf_r+0x176>
 80044e8:	89ab      	ldrh	r3, [r5, #12]
 80044ea:	065b      	lsls	r3, r3, #25
 80044ec:	f53f af2c 	bmi.w	8004348 <_svfiprintf_r+0x28>
 80044f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044f2:	b01d      	add	sp, #116	; 0x74
 80044f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f8:	ab03      	add	r3, sp, #12
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	462a      	mov	r2, r5
 80044fe:	4638      	mov	r0, r7
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <_svfiprintf_r+0x1f8>)
 8004502:	a904      	add	r1, sp, #16
 8004504:	f000 f87c 	bl	8004600 <_printf_i>
 8004508:	e7eb      	b.n	80044e2 <_svfiprintf_r+0x1c2>
 800450a:	bf00      	nop
 800450c:	08004afa 	.word	0x08004afa
 8004510:	08004b04 	.word	0x08004b04
 8004514:	00000000 	.word	0x00000000
 8004518:	08004269 	.word	0x08004269
 800451c:	08004b00 	.word	0x08004b00

08004520 <_printf_common>:
 8004520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004524:	4616      	mov	r6, r2
 8004526:	4699      	mov	r9, r3
 8004528:	688a      	ldr	r2, [r1, #8]
 800452a:	690b      	ldr	r3, [r1, #16]
 800452c:	4607      	mov	r7, r0
 800452e:	4293      	cmp	r3, r2
 8004530:	bfb8      	it	lt
 8004532:	4613      	movlt	r3, r2
 8004534:	6033      	str	r3, [r6, #0]
 8004536:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800453a:	460c      	mov	r4, r1
 800453c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004540:	b10a      	cbz	r2, 8004546 <_printf_common+0x26>
 8004542:	3301      	adds	r3, #1
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	0699      	lsls	r1, r3, #26
 800454a:	bf42      	ittt	mi
 800454c:	6833      	ldrmi	r3, [r6, #0]
 800454e:	3302      	addmi	r3, #2
 8004550:	6033      	strmi	r3, [r6, #0]
 8004552:	6825      	ldr	r5, [r4, #0]
 8004554:	f015 0506 	ands.w	r5, r5, #6
 8004558:	d106      	bne.n	8004568 <_printf_common+0x48>
 800455a:	f104 0a19 	add.w	sl, r4, #25
 800455e:	68e3      	ldr	r3, [r4, #12]
 8004560:	6832      	ldr	r2, [r6, #0]
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	42ab      	cmp	r3, r5
 8004566:	dc28      	bgt.n	80045ba <_printf_common+0x9a>
 8004568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800456c:	1e13      	subs	r3, r2, #0
 800456e:	6822      	ldr	r2, [r4, #0]
 8004570:	bf18      	it	ne
 8004572:	2301      	movne	r3, #1
 8004574:	0692      	lsls	r2, r2, #26
 8004576:	d42d      	bmi.n	80045d4 <_printf_common+0xb4>
 8004578:	4649      	mov	r1, r9
 800457a:	4638      	mov	r0, r7
 800457c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004580:	47c0      	blx	r8
 8004582:	3001      	adds	r0, #1
 8004584:	d020      	beq.n	80045c8 <_printf_common+0xa8>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	68e5      	ldr	r5, [r4, #12]
 800458a:	f003 0306 	and.w	r3, r3, #6
 800458e:	2b04      	cmp	r3, #4
 8004590:	bf18      	it	ne
 8004592:	2500      	movne	r5, #0
 8004594:	6832      	ldr	r2, [r6, #0]
 8004596:	f04f 0600 	mov.w	r6, #0
 800459a:	68a3      	ldr	r3, [r4, #8]
 800459c:	bf08      	it	eq
 800459e:	1aad      	subeq	r5, r5, r2
 80045a0:	6922      	ldr	r2, [r4, #16]
 80045a2:	bf08      	it	eq
 80045a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bfc4      	itt	gt
 80045ac:	1a9b      	subgt	r3, r3, r2
 80045ae:	18ed      	addgt	r5, r5, r3
 80045b0:	341a      	adds	r4, #26
 80045b2:	42b5      	cmp	r5, r6
 80045b4:	d11a      	bne.n	80045ec <_printf_common+0xcc>
 80045b6:	2000      	movs	r0, #0
 80045b8:	e008      	b.n	80045cc <_printf_common+0xac>
 80045ba:	2301      	movs	r3, #1
 80045bc:	4652      	mov	r2, sl
 80045be:	4649      	mov	r1, r9
 80045c0:	4638      	mov	r0, r7
 80045c2:	47c0      	blx	r8
 80045c4:	3001      	adds	r0, #1
 80045c6:	d103      	bne.n	80045d0 <_printf_common+0xb0>
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d0:	3501      	adds	r5, #1
 80045d2:	e7c4      	b.n	800455e <_printf_common+0x3e>
 80045d4:	2030      	movs	r0, #48	; 0x30
 80045d6:	18e1      	adds	r1, r4, r3
 80045d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045e2:	4422      	add	r2, r4
 80045e4:	3302      	adds	r3, #2
 80045e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045ea:	e7c5      	b.n	8004578 <_printf_common+0x58>
 80045ec:	2301      	movs	r3, #1
 80045ee:	4622      	mov	r2, r4
 80045f0:	4649      	mov	r1, r9
 80045f2:	4638      	mov	r0, r7
 80045f4:	47c0      	blx	r8
 80045f6:	3001      	adds	r0, #1
 80045f8:	d0e6      	beq.n	80045c8 <_printf_common+0xa8>
 80045fa:	3601      	adds	r6, #1
 80045fc:	e7d9      	b.n	80045b2 <_printf_common+0x92>
	...

08004600 <_printf_i>:
 8004600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004604:	460c      	mov	r4, r1
 8004606:	7e27      	ldrb	r7, [r4, #24]
 8004608:	4691      	mov	r9, r2
 800460a:	2f78      	cmp	r7, #120	; 0x78
 800460c:	4680      	mov	r8, r0
 800460e:	469a      	mov	sl, r3
 8004610:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004616:	d807      	bhi.n	8004628 <_printf_i+0x28>
 8004618:	2f62      	cmp	r7, #98	; 0x62
 800461a:	d80a      	bhi.n	8004632 <_printf_i+0x32>
 800461c:	2f00      	cmp	r7, #0
 800461e:	f000 80d9 	beq.w	80047d4 <_printf_i+0x1d4>
 8004622:	2f58      	cmp	r7, #88	; 0x58
 8004624:	f000 80a4 	beq.w	8004770 <_printf_i+0x170>
 8004628:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800462c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004630:	e03a      	b.n	80046a8 <_printf_i+0xa8>
 8004632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004636:	2b15      	cmp	r3, #21
 8004638:	d8f6      	bhi.n	8004628 <_printf_i+0x28>
 800463a:	a001      	add	r0, pc, #4	; (adr r0, 8004640 <_printf_i+0x40>)
 800463c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004640:	08004699 	.word	0x08004699
 8004644:	080046ad 	.word	0x080046ad
 8004648:	08004629 	.word	0x08004629
 800464c:	08004629 	.word	0x08004629
 8004650:	08004629 	.word	0x08004629
 8004654:	08004629 	.word	0x08004629
 8004658:	080046ad 	.word	0x080046ad
 800465c:	08004629 	.word	0x08004629
 8004660:	08004629 	.word	0x08004629
 8004664:	08004629 	.word	0x08004629
 8004668:	08004629 	.word	0x08004629
 800466c:	080047bb 	.word	0x080047bb
 8004670:	080046dd 	.word	0x080046dd
 8004674:	0800479d 	.word	0x0800479d
 8004678:	08004629 	.word	0x08004629
 800467c:	08004629 	.word	0x08004629
 8004680:	080047dd 	.word	0x080047dd
 8004684:	08004629 	.word	0x08004629
 8004688:	080046dd 	.word	0x080046dd
 800468c:	08004629 	.word	0x08004629
 8004690:	08004629 	.word	0x08004629
 8004694:	080047a5 	.word	0x080047a5
 8004698:	680b      	ldr	r3, [r1, #0]
 800469a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800469e:	1d1a      	adds	r2, r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	600a      	str	r2, [r1, #0]
 80046a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0a4      	b.n	80047f6 <_printf_i+0x1f6>
 80046ac:	6825      	ldr	r5, [r4, #0]
 80046ae:	6808      	ldr	r0, [r1, #0]
 80046b0:	062e      	lsls	r6, r5, #24
 80046b2:	f100 0304 	add.w	r3, r0, #4
 80046b6:	d50a      	bpl.n	80046ce <_printf_i+0xce>
 80046b8:	6805      	ldr	r5, [r0, #0]
 80046ba:	600b      	str	r3, [r1, #0]
 80046bc:	2d00      	cmp	r5, #0
 80046be:	da03      	bge.n	80046c8 <_printf_i+0xc8>
 80046c0:	232d      	movs	r3, #45	; 0x2d
 80046c2:	426d      	negs	r5, r5
 80046c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046c8:	230a      	movs	r3, #10
 80046ca:	485e      	ldr	r0, [pc, #376]	; (8004844 <_printf_i+0x244>)
 80046cc:	e019      	b.n	8004702 <_printf_i+0x102>
 80046ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046d2:	6805      	ldr	r5, [r0, #0]
 80046d4:	600b      	str	r3, [r1, #0]
 80046d6:	bf18      	it	ne
 80046d8:	b22d      	sxthne	r5, r5
 80046da:	e7ef      	b.n	80046bc <_printf_i+0xbc>
 80046dc:	680b      	ldr	r3, [r1, #0]
 80046de:	6825      	ldr	r5, [r4, #0]
 80046e0:	1d18      	adds	r0, r3, #4
 80046e2:	6008      	str	r0, [r1, #0]
 80046e4:	0628      	lsls	r0, r5, #24
 80046e6:	d501      	bpl.n	80046ec <_printf_i+0xec>
 80046e8:	681d      	ldr	r5, [r3, #0]
 80046ea:	e002      	b.n	80046f2 <_printf_i+0xf2>
 80046ec:	0669      	lsls	r1, r5, #25
 80046ee:	d5fb      	bpl.n	80046e8 <_printf_i+0xe8>
 80046f0:	881d      	ldrh	r5, [r3, #0]
 80046f2:	2f6f      	cmp	r7, #111	; 0x6f
 80046f4:	bf0c      	ite	eq
 80046f6:	2308      	moveq	r3, #8
 80046f8:	230a      	movne	r3, #10
 80046fa:	4852      	ldr	r0, [pc, #328]	; (8004844 <_printf_i+0x244>)
 80046fc:	2100      	movs	r1, #0
 80046fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004702:	6866      	ldr	r6, [r4, #4]
 8004704:	2e00      	cmp	r6, #0
 8004706:	bfa8      	it	ge
 8004708:	6821      	ldrge	r1, [r4, #0]
 800470a:	60a6      	str	r6, [r4, #8]
 800470c:	bfa4      	itt	ge
 800470e:	f021 0104 	bicge.w	r1, r1, #4
 8004712:	6021      	strge	r1, [r4, #0]
 8004714:	b90d      	cbnz	r5, 800471a <_printf_i+0x11a>
 8004716:	2e00      	cmp	r6, #0
 8004718:	d04d      	beq.n	80047b6 <_printf_i+0x1b6>
 800471a:	4616      	mov	r6, r2
 800471c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004720:	fb03 5711 	mls	r7, r3, r1, r5
 8004724:	5dc7      	ldrb	r7, [r0, r7]
 8004726:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800472a:	462f      	mov	r7, r5
 800472c:	42bb      	cmp	r3, r7
 800472e:	460d      	mov	r5, r1
 8004730:	d9f4      	bls.n	800471c <_printf_i+0x11c>
 8004732:	2b08      	cmp	r3, #8
 8004734:	d10b      	bne.n	800474e <_printf_i+0x14e>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	07df      	lsls	r7, r3, #31
 800473a:	d508      	bpl.n	800474e <_printf_i+0x14e>
 800473c:	6923      	ldr	r3, [r4, #16]
 800473e:	6861      	ldr	r1, [r4, #4]
 8004740:	4299      	cmp	r1, r3
 8004742:	bfde      	ittt	le
 8004744:	2330      	movle	r3, #48	; 0x30
 8004746:	f806 3c01 	strble.w	r3, [r6, #-1]
 800474a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800474e:	1b92      	subs	r2, r2, r6
 8004750:	6122      	str	r2, [r4, #16]
 8004752:	464b      	mov	r3, r9
 8004754:	4621      	mov	r1, r4
 8004756:	4640      	mov	r0, r8
 8004758:	f8cd a000 	str.w	sl, [sp]
 800475c:	aa03      	add	r2, sp, #12
 800475e:	f7ff fedf 	bl	8004520 <_printf_common>
 8004762:	3001      	adds	r0, #1
 8004764:	d14c      	bne.n	8004800 <_printf_i+0x200>
 8004766:	f04f 30ff 	mov.w	r0, #4294967295
 800476a:	b004      	add	sp, #16
 800476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004770:	4834      	ldr	r0, [pc, #208]	; (8004844 <_printf_i+0x244>)
 8004772:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004776:	680e      	ldr	r6, [r1, #0]
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	f856 5b04 	ldr.w	r5, [r6], #4
 800477e:	061f      	lsls	r7, r3, #24
 8004780:	600e      	str	r6, [r1, #0]
 8004782:	d514      	bpl.n	80047ae <_printf_i+0x1ae>
 8004784:	07d9      	lsls	r1, r3, #31
 8004786:	bf44      	itt	mi
 8004788:	f043 0320 	orrmi.w	r3, r3, #32
 800478c:	6023      	strmi	r3, [r4, #0]
 800478e:	b91d      	cbnz	r5, 8004798 <_printf_i+0x198>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	f023 0320 	bic.w	r3, r3, #32
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	2310      	movs	r3, #16
 800479a:	e7af      	b.n	80046fc <_printf_i+0xfc>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	f043 0320 	orr.w	r3, r3, #32
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	2378      	movs	r3, #120	; 0x78
 80047a6:	4828      	ldr	r0, [pc, #160]	; (8004848 <_printf_i+0x248>)
 80047a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047ac:	e7e3      	b.n	8004776 <_printf_i+0x176>
 80047ae:	065e      	lsls	r6, r3, #25
 80047b0:	bf48      	it	mi
 80047b2:	b2ad      	uxthmi	r5, r5
 80047b4:	e7e6      	b.n	8004784 <_printf_i+0x184>
 80047b6:	4616      	mov	r6, r2
 80047b8:	e7bb      	b.n	8004732 <_printf_i+0x132>
 80047ba:	680b      	ldr	r3, [r1, #0]
 80047bc:	6826      	ldr	r6, [r4, #0]
 80047be:	1d1d      	adds	r5, r3, #4
 80047c0:	6960      	ldr	r0, [r4, #20]
 80047c2:	600d      	str	r5, [r1, #0]
 80047c4:	0635      	lsls	r5, r6, #24
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	d501      	bpl.n	80047ce <_printf_i+0x1ce>
 80047ca:	6018      	str	r0, [r3, #0]
 80047cc:	e002      	b.n	80047d4 <_printf_i+0x1d4>
 80047ce:	0671      	lsls	r1, r6, #25
 80047d0:	d5fb      	bpl.n	80047ca <_printf_i+0x1ca>
 80047d2:	8018      	strh	r0, [r3, #0]
 80047d4:	2300      	movs	r3, #0
 80047d6:	4616      	mov	r6, r2
 80047d8:	6123      	str	r3, [r4, #16]
 80047da:	e7ba      	b.n	8004752 <_printf_i+0x152>
 80047dc:	680b      	ldr	r3, [r1, #0]
 80047de:	1d1a      	adds	r2, r3, #4
 80047e0:	600a      	str	r2, [r1, #0]
 80047e2:	681e      	ldr	r6, [r3, #0]
 80047e4:	2100      	movs	r1, #0
 80047e6:	4630      	mov	r0, r6
 80047e8:	6862      	ldr	r2, [r4, #4]
 80047ea:	f000 f82f 	bl	800484c <memchr>
 80047ee:	b108      	cbz	r0, 80047f4 <_printf_i+0x1f4>
 80047f0:	1b80      	subs	r0, r0, r6
 80047f2:	6060      	str	r0, [r4, #4]
 80047f4:	6863      	ldr	r3, [r4, #4]
 80047f6:	6123      	str	r3, [r4, #16]
 80047f8:	2300      	movs	r3, #0
 80047fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047fe:	e7a8      	b.n	8004752 <_printf_i+0x152>
 8004800:	4632      	mov	r2, r6
 8004802:	4649      	mov	r1, r9
 8004804:	4640      	mov	r0, r8
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	47d0      	blx	sl
 800480a:	3001      	adds	r0, #1
 800480c:	d0ab      	beq.n	8004766 <_printf_i+0x166>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	079b      	lsls	r3, r3, #30
 8004812:	d413      	bmi.n	800483c <_printf_i+0x23c>
 8004814:	68e0      	ldr	r0, [r4, #12]
 8004816:	9b03      	ldr	r3, [sp, #12]
 8004818:	4298      	cmp	r0, r3
 800481a:	bfb8      	it	lt
 800481c:	4618      	movlt	r0, r3
 800481e:	e7a4      	b.n	800476a <_printf_i+0x16a>
 8004820:	2301      	movs	r3, #1
 8004822:	4632      	mov	r2, r6
 8004824:	4649      	mov	r1, r9
 8004826:	4640      	mov	r0, r8
 8004828:	47d0      	blx	sl
 800482a:	3001      	adds	r0, #1
 800482c:	d09b      	beq.n	8004766 <_printf_i+0x166>
 800482e:	3501      	adds	r5, #1
 8004830:	68e3      	ldr	r3, [r4, #12]
 8004832:	9903      	ldr	r1, [sp, #12]
 8004834:	1a5b      	subs	r3, r3, r1
 8004836:	42ab      	cmp	r3, r5
 8004838:	dcf2      	bgt.n	8004820 <_printf_i+0x220>
 800483a:	e7eb      	b.n	8004814 <_printf_i+0x214>
 800483c:	2500      	movs	r5, #0
 800483e:	f104 0619 	add.w	r6, r4, #25
 8004842:	e7f5      	b.n	8004830 <_printf_i+0x230>
 8004844:	08004b0b 	.word	0x08004b0b
 8004848:	08004b1c 	.word	0x08004b1c

0800484c <memchr>:
 800484c:	4603      	mov	r3, r0
 800484e:	b510      	push	{r4, lr}
 8004850:	b2c9      	uxtb	r1, r1
 8004852:	4402      	add	r2, r0
 8004854:	4293      	cmp	r3, r2
 8004856:	4618      	mov	r0, r3
 8004858:	d101      	bne.n	800485e <memchr+0x12>
 800485a:	2000      	movs	r0, #0
 800485c:	e003      	b.n	8004866 <memchr+0x1a>
 800485e:	7804      	ldrb	r4, [r0, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	428c      	cmp	r4, r1
 8004864:	d1f6      	bne.n	8004854 <memchr+0x8>
 8004866:	bd10      	pop	{r4, pc}

08004868 <memcpy>:
 8004868:	440a      	add	r2, r1
 800486a:	4291      	cmp	r1, r2
 800486c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004870:	d100      	bne.n	8004874 <memcpy+0xc>
 8004872:	4770      	bx	lr
 8004874:	b510      	push	{r4, lr}
 8004876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800487a:	4291      	cmp	r1, r2
 800487c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004880:	d1f9      	bne.n	8004876 <memcpy+0xe>
 8004882:	bd10      	pop	{r4, pc}

08004884 <memmove>:
 8004884:	4288      	cmp	r0, r1
 8004886:	b510      	push	{r4, lr}
 8004888:	eb01 0402 	add.w	r4, r1, r2
 800488c:	d902      	bls.n	8004894 <memmove+0x10>
 800488e:	4284      	cmp	r4, r0
 8004890:	4623      	mov	r3, r4
 8004892:	d807      	bhi.n	80048a4 <memmove+0x20>
 8004894:	1e43      	subs	r3, r0, #1
 8004896:	42a1      	cmp	r1, r4
 8004898:	d008      	beq.n	80048ac <memmove+0x28>
 800489a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800489e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048a2:	e7f8      	b.n	8004896 <memmove+0x12>
 80048a4:	4601      	mov	r1, r0
 80048a6:	4402      	add	r2, r0
 80048a8:	428a      	cmp	r2, r1
 80048aa:	d100      	bne.n	80048ae <memmove+0x2a>
 80048ac:	bd10      	pop	{r4, pc}
 80048ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048b6:	e7f7      	b.n	80048a8 <memmove+0x24>

080048b8 <_free_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4605      	mov	r5, r0
 80048bc:	2900      	cmp	r1, #0
 80048be:	d043      	beq.n	8004948 <_free_r+0x90>
 80048c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c4:	1f0c      	subs	r4, r1, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bfb8      	it	lt
 80048ca:	18e4      	addlt	r4, r4, r3
 80048cc:	f000 f8d0 	bl	8004a70 <__malloc_lock>
 80048d0:	4a1e      	ldr	r2, [pc, #120]	; (800494c <_free_r+0x94>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	4610      	mov	r0, r2
 80048d6:	b933      	cbnz	r3, 80048e6 <_free_r+0x2e>
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	6014      	str	r4, [r2, #0]
 80048dc:	4628      	mov	r0, r5
 80048de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e2:	f000 b8cb 	b.w	8004a7c <__malloc_unlock>
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	d90a      	bls.n	8004900 <_free_r+0x48>
 80048ea:	6821      	ldr	r1, [r4, #0]
 80048ec:	1862      	adds	r2, r4, r1
 80048ee:	4293      	cmp	r3, r2
 80048f0:	bf01      	itttt	eq
 80048f2:	681a      	ldreq	r2, [r3, #0]
 80048f4:	685b      	ldreq	r3, [r3, #4]
 80048f6:	1852      	addeq	r2, r2, r1
 80048f8:	6022      	streq	r2, [r4, #0]
 80048fa:	6063      	str	r3, [r4, #4]
 80048fc:	6004      	str	r4, [r0, #0]
 80048fe:	e7ed      	b.n	80048dc <_free_r+0x24>
 8004900:	461a      	mov	r2, r3
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	b10b      	cbz	r3, 800490a <_free_r+0x52>
 8004906:	42a3      	cmp	r3, r4
 8004908:	d9fa      	bls.n	8004900 <_free_r+0x48>
 800490a:	6811      	ldr	r1, [r2, #0]
 800490c:	1850      	adds	r0, r2, r1
 800490e:	42a0      	cmp	r0, r4
 8004910:	d10b      	bne.n	800492a <_free_r+0x72>
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	4401      	add	r1, r0
 8004916:	1850      	adds	r0, r2, r1
 8004918:	4283      	cmp	r3, r0
 800491a:	6011      	str	r1, [r2, #0]
 800491c:	d1de      	bne.n	80048dc <_free_r+0x24>
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4401      	add	r1, r0
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	6053      	str	r3, [r2, #4]
 8004928:	e7d8      	b.n	80048dc <_free_r+0x24>
 800492a:	d902      	bls.n	8004932 <_free_r+0x7a>
 800492c:	230c      	movs	r3, #12
 800492e:	602b      	str	r3, [r5, #0]
 8004930:	e7d4      	b.n	80048dc <_free_r+0x24>
 8004932:	6820      	ldr	r0, [r4, #0]
 8004934:	1821      	adds	r1, r4, r0
 8004936:	428b      	cmp	r3, r1
 8004938:	bf01      	itttt	eq
 800493a:	6819      	ldreq	r1, [r3, #0]
 800493c:	685b      	ldreq	r3, [r3, #4]
 800493e:	1809      	addeq	r1, r1, r0
 8004940:	6021      	streq	r1, [r4, #0]
 8004942:	6063      	str	r3, [r4, #4]
 8004944:	6054      	str	r4, [r2, #4]
 8004946:	e7c9      	b.n	80048dc <_free_r+0x24>
 8004948:	bd38      	pop	{r3, r4, r5, pc}
 800494a:	bf00      	nop
 800494c:	200000ec 	.word	0x200000ec

08004950 <_malloc_r>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	1ccd      	adds	r5, r1, #3
 8004954:	f025 0503 	bic.w	r5, r5, #3
 8004958:	3508      	adds	r5, #8
 800495a:	2d0c      	cmp	r5, #12
 800495c:	bf38      	it	cc
 800495e:	250c      	movcc	r5, #12
 8004960:	2d00      	cmp	r5, #0
 8004962:	4606      	mov	r6, r0
 8004964:	db01      	blt.n	800496a <_malloc_r+0x1a>
 8004966:	42a9      	cmp	r1, r5
 8004968:	d903      	bls.n	8004972 <_malloc_r+0x22>
 800496a:	230c      	movs	r3, #12
 800496c:	6033      	str	r3, [r6, #0]
 800496e:	2000      	movs	r0, #0
 8004970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004972:	f000 f87d 	bl	8004a70 <__malloc_lock>
 8004976:	4921      	ldr	r1, [pc, #132]	; (80049fc <_malloc_r+0xac>)
 8004978:	680a      	ldr	r2, [r1, #0]
 800497a:	4614      	mov	r4, r2
 800497c:	b99c      	cbnz	r4, 80049a6 <_malloc_r+0x56>
 800497e:	4f20      	ldr	r7, [pc, #128]	; (8004a00 <_malloc_r+0xb0>)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	b923      	cbnz	r3, 800498e <_malloc_r+0x3e>
 8004984:	4621      	mov	r1, r4
 8004986:	4630      	mov	r0, r6
 8004988:	f000 f862 	bl	8004a50 <_sbrk_r>
 800498c:	6038      	str	r0, [r7, #0]
 800498e:	4629      	mov	r1, r5
 8004990:	4630      	mov	r0, r6
 8004992:	f000 f85d 	bl	8004a50 <_sbrk_r>
 8004996:	1c43      	adds	r3, r0, #1
 8004998:	d123      	bne.n	80049e2 <_malloc_r+0x92>
 800499a:	230c      	movs	r3, #12
 800499c:	4630      	mov	r0, r6
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	f000 f86c 	bl	8004a7c <__malloc_unlock>
 80049a4:	e7e3      	b.n	800496e <_malloc_r+0x1e>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	1b5b      	subs	r3, r3, r5
 80049aa:	d417      	bmi.n	80049dc <_malloc_r+0x8c>
 80049ac:	2b0b      	cmp	r3, #11
 80049ae:	d903      	bls.n	80049b8 <_malloc_r+0x68>
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	441c      	add	r4, r3
 80049b4:	6025      	str	r5, [r4, #0]
 80049b6:	e004      	b.n	80049c2 <_malloc_r+0x72>
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	42a2      	cmp	r2, r4
 80049bc:	bf0c      	ite	eq
 80049be:	600b      	streq	r3, [r1, #0]
 80049c0:	6053      	strne	r3, [r2, #4]
 80049c2:	4630      	mov	r0, r6
 80049c4:	f000 f85a 	bl	8004a7c <__malloc_unlock>
 80049c8:	f104 000b 	add.w	r0, r4, #11
 80049cc:	1d23      	adds	r3, r4, #4
 80049ce:	f020 0007 	bic.w	r0, r0, #7
 80049d2:	1ac2      	subs	r2, r0, r3
 80049d4:	d0cc      	beq.n	8004970 <_malloc_r+0x20>
 80049d6:	1a1b      	subs	r3, r3, r0
 80049d8:	50a3      	str	r3, [r4, r2]
 80049da:	e7c9      	b.n	8004970 <_malloc_r+0x20>
 80049dc:	4622      	mov	r2, r4
 80049de:	6864      	ldr	r4, [r4, #4]
 80049e0:	e7cc      	b.n	800497c <_malloc_r+0x2c>
 80049e2:	1cc4      	adds	r4, r0, #3
 80049e4:	f024 0403 	bic.w	r4, r4, #3
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	d0e3      	beq.n	80049b4 <_malloc_r+0x64>
 80049ec:	1a21      	subs	r1, r4, r0
 80049ee:	4630      	mov	r0, r6
 80049f0:	f000 f82e 	bl	8004a50 <_sbrk_r>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d1dd      	bne.n	80049b4 <_malloc_r+0x64>
 80049f8:	e7cf      	b.n	800499a <_malloc_r+0x4a>
 80049fa:	bf00      	nop
 80049fc:	200000ec 	.word	0x200000ec
 8004a00:	200000f0 	.word	0x200000f0

08004a04 <_realloc_r>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	4607      	mov	r7, r0
 8004a08:	4614      	mov	r4, r2
 8004a0a:	460e      	mov	r6, r1
 8004a0c:	b921      	cbnz	r1, 8004a18 <_realloc_r+0x14>
 8004a0e:	4611      	mov	r1, r2
 8004a10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a14:	f7ff bf9c 	b.w	8004950 <_malloc_r>
 8004a18:	b922      	cbnz	r2, 8004a24 <_realloc_r+0x20>
 8004a1a:	f7ff ff4d 	bl	80048b8 <_free_r>
 8004a1e:	4625      	mov	r5, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a24:	f000 f830 	bl	8004a88 <_malloc_usable_size_r>
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d20f      	bcs.n	8004a4c <_realloc_r+0x48>
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f7ff ff8e 	bl	8004950 <_malloc_r>
 8004a34:	4605      	mov	r5, r0
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d0f2      	beq.n	8004a20 <_realloc_r+0x1c>
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	f7ff ff13 	bl	8004868 <memcpy>
 8004a42:	4631      	mov	r1, r6
 8004a44:	4638      	mov	r0, r7
 8004a46:	f7ff ff37 	bl	80048b8 <_free_r>
 8004a4a:	e7e9      	b.n	8004a20 <_realloc_r+0x1c>
 8004a4c:	4635      	mov	r5, r6
 8004a4e:	e7e7      	b.n	8004a20 <_realloc_r+0x1c>

08004a50 <_sbrk_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	2300      	movs	r3, #0
 8004a54:	4d05      	ldr	r5, [pc, #20]	; (8004a6c <_sbrk_r+0x1c>)
 8004a56:	4604      	mov	r4, r0
 8004a58:	4608      	mov	r0, r1
 8004a5a:	602b      	str	r3, [r5, #0]
 8004a5c:	f7fd f936 	bl	8001ccc <_sbrk>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d102      	bne.n	8004a6a <_sbrk_r+0x1a>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	b103      	cbz	r3, 8004a6a <_sbrk_r+0x1a>
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	bd38      	pop	{r3, r4, r5, pc}
 8004a6c:	20000260 	.word	0x20000260

08004a70 <__malloc_lock>:
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <__malloc_lock+0x8>)
 8004a72:	f000 b811 	b.w	8004a98 <__retarget_lock_acquire_recursive>
 8004a76:	bf00      	nop
 8004a78:	20000268 	.word	0x20000268

08004a7c <__malloc_unlock>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__malloc_unlock+0x8>)
 8004a7e:	f000 b80c 	b.w	8004a9a <__retarget_lock_release_recursive>
 8004a82:	bf00      	nop
 8004a84:	20000268 	.word	0x20000268

08004a88 <_malloc_usable_size_r>:
 8004a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a8c:	1f18      	subs	r0, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bfbc      	itt	lt
 8004a92:	580b      	ldrlt	r3, [r1, r0]
 8004a94:	18c0      	addlt	r0, r0, r3
 8004a96:	4770      	bx	lr

08004a98 <__retarget_lock_acquire_recursive>:
 8004a98:	4770      	bx	lr

08004a9a <__retarget_lock_release_recursive>:
 8004a9a:	4770      	bx	lr

08004a9c <_init>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr

08004aa8 <_fini>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr
